"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4882],{8340:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"gurobi","metadata":{"permalink":"/eason-blog/blog/gurobi","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-03-13-gurobi/index.md","source":"@site/blog/2025-03-13-gurobi/index.md","title":"Gurobi 101","description":"\u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u719f\u6089Gurobi\uff0c\u5e76\u5c55\u5f00\u5b66\u4e60\u3002","date":"2025-03-13T00:00:00.000Z","tags":[{"inline":false,"label":"Operation Research","permalink":"/eason-blog/blog/tags/or","description":"Operation Research related posts"}],"readingTime":5.805,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"gurobi","title":"Gurobi 101","authors":"eason","tags":["or"],"draft":false},"unlisted":false,"nextItem":{"title":"\u4f7f\u7528Python\u68c0\u6d4b\u84dd\u7259\u4fe1\u53f7","permalink":"/eason-blog/blog/ble-beacon"}},"content":"\u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u719f\u6089Gurobi\uff0c\u5e76\u5c55\u5f00\u5b66\u4e60\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u5b89\u88c5\\n\\n### \u901a\u8fc7Docker\u4f7f\u7528Gurobi\\n\\n\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u57fa\u4e8eDocker\u7684Python JupyterLab\u7684\u8fd0\u884c\u73af\u5883\u3002\\n\u8be5\u73af\u5883\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u591a\u79cd\u7684Python Notebook\u6848\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u62e9\u53d6\u6765\u5b66\u4e60Gurobi\u3002\\n\\n```bash\\ndocker run -p 10888:8888 gurobi/modeling-examples\\n```\\n\\n\u8fd0\u884c\u547d\u4ee4\u540e\uff0c\u6211\u4eec\u6253\u5f00\uff1a\\n[http://localhost:10888/lab](http://localhost:10888/lab)\u6765\u67e5\u770bJupyterLab\u73af\u5883\u3002\\n\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![Jupyter landing page](./jupyter-landing-page.png)\\n\\n\u6211\u4eec\u6253\u5f00\u4efb\u610f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u5373\u53ef\u5f00\u59cb\u8fdb\u884cGurobi\u7684\u6848\u4f8b\u7814\u7a76\u3002\\n\\n\\n## \u4e8c\u8fdb\u5236\u6574\u6570\u89c4\u5212\\n\\n\u6211\u4eec\u9996\u5148\u6765\u5c1d\u8bd5\u89e3\u51b3\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684[\u80cc\u5305\u95ee\u9898](https://zh.wikipedia.org/wiki/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98)\u3002\\n\\n\u5047\u8bbe\uff0c\u6211\u4eec\u8981\u53bb\u65c5\u884c\uff0c\u8981\u643a\u5e26\u4e00\u4e9b\u7269\u54c1\uff0c\u800c\u8fd9\u4e9b\u7269\u54c1\u6709\u91cd\u91cf\u548c\u5bf9\u4e8e\u6211\u4eec\u7684\u4ef7\u503c\u3002\\n\u90a3\u4e48\u6211\u4eec\u5982\u679c\u7528\u4e00\u4e2a\u80cc\u5305\u6765\u643a\u5e26\u8fd9\u4e9b\u7269\u54c1\u7684\u8bdd\uff0c\u7531\u4e8e\u80cc\u5305\u7684\u5bb9\u91cf\u9650\u5236\uff0c\\n\u5bfc\u81f4\u6211\u4eec\u5fc5\u987b\u6700\u5927\u5316\u7684\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u6765\u643a\u5e26\u3002\\n\\n\u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u7684\u7269\u54c1\uff1a\\n\\n| \u7269\u54c1\u540d\u79f0 | \u91cd\u91cf | \u4ef7\u503c |\\n| -------- | ---- | ---- |\\n| \u624b\u7535\u7b52   | 1    | 5    |\\n| \u7761\u888b     | 3    | 12   |\\n| \u98df\u7269     | 2    | 8    |\\n| \u6c34       | 4    | 15   |\\n\\n\u90a3\u4e48\u6211\u4eec\u7684\u601d\u8def\u662f\uff0c\u901a\u8fc7Gurobi\u6765\u5b9a\u4e49\u53d8\u91cf\uff08Variables\uff09\u3001\u9650\u5236\u6761\u4ef6\uff08Constraints\uff09\u4ee5\u53ca\u4f18\u5316\u76ee\u6807\uff08Objective\uff09\uff0c\\n\u6765\u627e\u5230\u9488\u5bf9\u4e0a\u9762\u7684\u95ee\u9898\u6700\u4f18\u7684\u7b54\u6848\u3002\\n\\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2aGurobi Python\u6a21\u578b\uff1a\\n\\n```python\\n# Import Gurobi Python \\nimport gurobipy as gp\\n\\nmodel = gp.Model(\\"Knapsack\\")\\n```\\n\\n\u7136\u540e\u6211\u4eec\u5c06\u4e0a\u8ff0\u95ee\u9898\u7684\u4e00\u4e9b\u53c2\u6570\u8fdb\u884c\u5b9a\u4e49\uff0c\u6bd4\u5982\u7269\u54c1\u7684\u540d\u79f0\u3001\u91cd\u91cf\u548c\u4ef7\u503c\u7b49\uff1a\\n\\n```python\\n# Set items with weight and value\\nitems = {\\n    \'flashlight\': {\'weight\': 1, \'value\': 5},\\n    \'sleeping_bag\': {\'weight\': 3, \'value\': 12},\\n    \'food\': {\'weight\': 2, \'value\': 8},\\n    \'water\': {\'weight\': 4, \'value\': 15}\\n}\\n\\n# Set the max capacity\\nCAPACITY = 7\\n```\\n\\n\u63a5\u7740\uff0c\u6211\u4eec\u7ed9Gurobi\u6a21\u578b\u6dfb\u52a0\u76f8\u5173\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u901a\u8fc7\u4e8c\u8fdb\u5236\u7684\u8868\u793a\uff081\u662f\u643a\u5e26\u8be5\u7269\u54c1\uff0c0\u662f\u4e0d\u643a\u5e26\u8be5\u7269\u54c1\uff09\u6765\u8868\u793a\u6700\u540e\u7684\u643a\u5e26\u72b6\u6001\u3002\\n\\n```python\\n# Add variables\\nx = model.addVars(items.keys(), vtype=gp.GRB.BINARY, name=\\"select\\")\\n```\\n\\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e0a\u8ff0\u95ee\u9898\u4e2d\u7684\u9650\u5236\u6761\u4ef6\uff0c\u6bd4\u5982\u6240\u9009\u62e9\u7684\u7269\u54c1\u4e0d\u80fd\u8d85\u8fc7\u6211\u4eec\u80cc\u5305\u53ef\u5bb9\u7eb3\u7684\u4e0a\u9650\u3002\\n\\n```python\\nmodel.addConstr(\\n    gp.quicksum(items[i][\'weight\'] * x[i] for i in items) <= CAPACITY,\\n    name=\\"capacity\\"\\n)\\n```\\n\\n\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u6240\u671f\u671b\u7684\u4f18\u5316\u76ee\u6807\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684Objective\u3002\\n\\n```python\\nmodel.setObjective(\\n    gp.quicksum(items[i][\'value\'] * x[i] for i in items),\\n    gp.GRB.MAXIMIZE,\\n)\\n```\\n\\n\u4e0a\u8ff0\u5185\u5bb9\u6dfb\u52a0\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f18\u5316\u6c42\u89e3\u7684\u6d41\u7a0b\u4e86\u3002\u6267\u884c\uff1a\\n\\n```python\\nmodel.optimize()\\n```\\n\\n\u4f1a\u89e6\u53d1\u4f18\u5316\u8fc7\u7a0b\uff0c\u5176\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\\n\\n```plaintext\\nGurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - \\"Debian GNU/Linux 11 (bullseye)\\")\\n\\nCPU model: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz, instruction set [SSE2|AVX|AVX2]\\nThread count: 8 physical cores, 8 logical processors, using up to 8 threads\\n\\nOptimize a model with 1 rows, 4 columns and 4 nonzeros\\nModel fingerprint: 0xc569c671\\nVariable types: 0 continuous, 4 integer (4 binary)\\nCoefficient statistics:\\n  Matrix range     [1e+00, 4e+00]\\n  Objective range  [5e+00, 2e+01]\\n  Bounds range     [1e+00, 1e+00]\\n  RHS range        [7e+00, 7e+00]\\nFound heuristic solution: objective 25.0000000\\nPresolve removed 1 rows and 4 columns\\nPresolve time: 0.00s\\nPresolve: All rows and columns removed\\n\\nExplored 0 nodes (0 simplex iterations) in 0.05 seconds (0.00 work units)\\nThread count was 1 (of 8 available processors)\\n\\nSolution count 2: 28 25 \\n\\nOptimal solution found (tolerance 1.00e-04)\\nBest objective 2.800000000000e+01, best bound 2.800000000000e+01, gap 0.0000%\\n```\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u68c0\u67e5\u8bed\u53e5\u6765\u67e5\u770b\u6a21\u578b\u6700\u540e\u7ed3\u679c\u7684\u7ec6\u8282\u5185\u5bb9\uff1a\\n\\n```python\\n# Get model\'s status, gp.GRB.OPTIMAL == 2\\nmodel.status\\n\\n# Get the objective value\\nmodel.objVal\\n\\n# Print each variables\' value\\nfor i in model.getVars():\\n    print(f\'{i.varName}, {i.x}\')\\n```\\n\\n\u8fd0\u884c\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u6a21\u578b\u6700\u4f18\u7ed3\u679c\u662f28\uff0c\u662f\u5982\u4e0b\u7684\u7269\u54c1\u7ec4\u5408\uff1a\\n\\n```plaintext\\nselect[flashlight], 1.0\\nselect[sleeping_bag], 0.0\\nselect[food], 1.0\\nselect[water], 1.0\\n```\\n\\n\u4e5f\u5c31\u662f\uff0c\u9700\u8981\u643a\u5e26\u624b\u7535\u7b52\u3001\u98df\u7269\u548c\u6c34\u3002\u4e0d\u643a\u5e26\u7761\u888b\u3002\\n\\n\u81f3\u6b64\uff0c\u6211\u4eec\u7684\u6c42\u89e3\u5de5\u4f5c\u5b8c\u6210\u3002\\n\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u8fd0\u7b79\u4f18\u5316\u6c42\u89e3\u7684\u52a8\u4f5c\u3002\\n\\n## \u5206\u652f\u5b9a\u754c\u7b97\u6cd5\\n\\n\u9996\u5148\u5bf9\u95ee\u9898\u8fdb\u884c\u5b9a\u4e49\uff0c\u7136\u540e\u901a\u8fc7\u7ebf\u6027\u89c4\u5212\u677e\u5f1b\uff08Linear Programming Relaxation\uff09\u6765\u83b7\u5f97\u5c0f\u6570\u89e3\uff08\u4f5c\u4e3a\u521d\u59cb\u7684\u4e0a\u754c\u6216\u8005\u4e0b\u754c\uff09\u3002\\n\u677e\u5f1b\u7684\u542b\u4e49\u5c31\u662f\u6682\u65f6\u53bb\u6389\u7ed3\u679c\u5fc5\u987b\u662f\u6574\u6570\u7684\u9650\u5236\uff0c\u5148\u901a\u8fc7\u5c0f\u6570\u6765\u6c42\u4e00\u4e2a\u5728\u5f53\u524d\u53ef\u884c\u57df\u5185\u7684\u5168\u5c40\u6700\u4f18\u5c0f\u6570\u89e3\uff0c\u4f5c\u4e3a\u540e\u7eed\u5206\u652f\u7684\u53c2\u8003\u754c\u9650\u3002\\n\\n\u7136\u540e\uff0c\u901a\u8fc7\u5206\u652f\u5c06\u95ee\u9898\u62c6\u89e3\u4e3a\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u9488\u5bf9\u67d0\u4e2a\u53d8\u91cf\u7684\u53d6\u503c\u6dfb\u52a0\u6574\u6570\u7ea6\u675f\uff0c\u4ece\u800c\u7f29\u5c0f\u89e3\u7a7a\u95f4\uff0c\u63a2\u7d22\u53ef\u80fd\u7684\u6574\u6570\u89e3\u3002\\n\u4f9d\u6b21\u904d\u5386\u90e8\u5206\u5b50\u95ee\u9898\uff0c\u5e76\u901a\u8fc7\u526a\u679d\uff08Pruning\uff09\uff0c\u63d0\u524d\u7ec8\u6b62\u90a3\u4e9b\u76ee\u6807\u51fd\u6570\u503c\u6bd4\u5f53\u524d\u5df2\u77e5\u754c\u66f4\u5dee\u7684\u5206\u652f\uff0c\u4ee5\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002\\n\\n\u901a\u8fc7\u4e0d\u65ad\u66f4\u65b0\u4e0a\u754c\u548c\u4e0b\u754c\uff0c\u9010\u6b65\u6536\u655b\uff0c\u76f4\u5230\u627e\u5230\u5168\u5c40\u6700\u4f18\u7684\u6574\u6570\u89e3\uff0c\u6216\u8005\u6240\u6709\u5206\u652f\u90fd\u88ab\u63a2\u7d22\u6216\u526a\u679d\uff0c\u7b97\u6cd5\u7ec8\u6b62\u3002\\n\\n![Branch and Bound Algorithm Example](./branch-and-bound-youtube-screenshot.png)\\n*[Branch and bound algorithm example](https://youtu.be/cEcS13Ku1i8?t=516)*\\n\\n\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- Gurobi\u5b98\u65b9\u5165\u95e8\u6307\u5357: [https://support.gurobi.com/hc/en-us/articles/14799677517585-Getting-Started-with-Gurobi-Optimizer](https://support.gurobi.com/hc/en-us/articles/14799677517585-Getting-Started-with-Gurobi-Optimizer)\\n- Branch and bound algorithm example: [https://www.youtube.com/watch?v=cEcS13Ku1i8](https://www.youtube.com/watch?v=cEcS13Ku1i8)"},{"id":"ble-beacon","metadata":{"permalink":"/eason-blog/blog/ble-beacon","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-03-09-ble-beacon/index.md","source":"@site/blog/2025-03-09-ble-beacon/index.md","title":"\u4f7f\u7528Python\u68c0\u6d4b\u84dd\u7259\u4fe1\u53f7","description":"\u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528Python\u5728MacOS\u4e0a\u68c0\u6d4bBLE\u4fe1\u53f7\u5e76\u53ef\u89c6\u5316\u5c55\u793a\u4fe1\u53f7\u5f3a\u5ea6\u3002","date":"2025-03-09T00:00:00.000Z","tags":[{"inline":false,"label":"Bluetooth","permalink":"/eason-blog/blog/tags/bluetooth","description":"Bluetooth related posts"}],"readingTime":14.86,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"ble-beacon","title":"\u4f7f\u7528Python\u68c0\u6d4b\u84dd\u7259\u4fe1\u53f7","authors":"eason","tags":["bluetooth"],"draft":false},"unlisted":false,"prevItem":{"title":"Gurobi 101","permalink":"/eason-blog/blog/gurobi"},"nextItem":{"title":"\u57fa\u4e8eDocker\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u73af\u5883","permalink":"/eason-blog/blog/ml-env-setup"}},"content":"\u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528Python\u5728MacOS\u4e0a\u68c0\u6d4bBLE\u4fe1\u53f7\u5e76\u53ef\u89c6\u5316\u5c55\u793a\u4fe1\u53f7\u5f3a\u5ea6\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u5e38\u89c1\u7684\u5b9a\u4f4d\u65b9\u6cd5\\n\\n\u5728\u8bbe\u5907\u5b9a\u4f4d\u7684\u9886\u57df\u5185\uff0c\u6709\u5927\u69823\u79cd\u5b9a\u4f4d\u6280\u672f\uff0c\u5176\u5206\u522b\u4e3a\uff1aUWB\uff08\u8d85\u5bbd\u5e26\uff09\u3001BLE\uff08\u4f4e\u529f\u8017\u84dd\u7259\uff09\u548cWiFi\u3002\u8fd9\u4e09\u79cd\u6280\u672f\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u573a\u666f\u3002\\n\\n### UWB\uff08Ultra-Wideband\uff0c\u8d85\u5bbd\u5e26\uff09\u5b9a\u4f4d\\n\\nUWB\u662f\u4e00\u79cd\u4f7f\u7528\u6781\u77ed\u8109\u51b2\u5728\u5bbd\u9891\u5e26\u4e0a\u4f20\u8f93\u6570\u636e\u7684\u65e0\u7ebf\u901a\u4fe1\u6280\u672f\u3002\u5728\u5b9a\u4f4d\u9886\u57df\uff0cUWB\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\\n\\n#### \u5de5\u4f5c\u539f\u7406\\nUWB\u5b9a\u4f4d\u4e3b\u8981\u57fa\u4e8eTOF\uff08Time of Flight\uff0c\u98de\u884c\u65f6\u95f4\uff09\u6216TDOA\uff08Time Difference of Arrival\uff0c\u5230\u8fbe\u65f6\u95f4\u5dee\uff09\u539f\u7406\u3002\u8bbe\u5907\u901a\u8fc7\u6d4b\u91cf\u65e0\u7ebf\u7535\u4fe1\u53f7\u4ece\u53d1\u5c04\u5230\u63a5\u6536\u7684\u65f6\u95f4\u6765\u8ba1\u7b97\u8ddd\u79bb\uff0c\u8fdb\u800c\u786e\u5b9a\u4f4d\u7f6e\u3002\\n\\n#### \u4f18\u52bf\\n- **\u9ad8\u7cbe\u5ea6**\uff1aUWB\u53ef\u4ee5\u63d0\u4f9b\u5398\u7c73\u7ea7\u7684\u5b9a\u4f4d\u7cbe\u5ea6\uff08\u901a\u5e38\u572810-30\u5398\u7c73\u8303\u56f4\u5185\uff09\\n- **\u6297\u591a\u5f84\u5e72\u6270**\uff1a\u7531\u4e8e\u4f7f\u7528\u6781\u77ed\u7684\u8109\u51b2\uff0cUWB\u5bf9\u591a\u5f84\u5e72\u6270\u6709\u5f88\u5f3a\u7684\u62b5\u6297\u529b\\n- **\u7a7f\u5899\u80fd\u529b\u5f3a**\uff1aUWB\u4fe1\u53f7\u53ef\u4ee5\u7a7f\u900f\u5899\u58c1\u548c\u5176\u4ed6\u969c\u788d\u7269\\n- **\u4f4e\u529f\u8017**\uff1a\u76f8\u5bf9\u4e8e\u5176\u4ed6\u9ad8\u7cbe\u5ea6\u5b9a\u4f4d\u6280\u672f\uff0cUWB\u7684\u529f\u8017\u8f83\u4f4e\\n\\n#### \u52a3\u52bf\\n- **\u6210\u672c\u9ad8**\uff1aUWB\u8bbe\u5907\u548c\u57fa\u7840\u8bbe\u65bd\u7684\u6210\u672c\u76f8\u5bf9\u8f83\u9ad8\\n- **\u8986\u76d6\u8303\u56f4\u6709\u9650**\uff1a\u901a\u5e38\u9700\u8981\u591a\u4e2a\u951a\u70b9\uff08\u57fa\u7ad9\uff09\u6765\u8986\u76d6\u8f83\u5927\u533a\u57df\\n- **\u6807\u51c6\u5316\u7a0b\u5ea6\u8f83\u4f4e**\uff1a\u867d\u7136\u6709IEEE 802.15.4z\u6807\u51c6\uff0c\u4f46\u5e02\u573a\u4e0a\u7684\u5b9e\u73b0\u591a\u6837\u5316\\n\\n#### \u5e94\u7528\u573a\u666f\\n- \u9ad8\u7cbe\u5ea6\u5ba4\u5185\u5b9a\u4f4d\\n- \u8d44\u4ea7\u8ffd\u8e2a\\n- \u667a\u80fd\u5bb6\u5c45\\n- \u5de5\u4e1a\u81ea\u52a8\u5316\\n- \u8f66\u8f86\u9632\u76d7\u7cfb\u7edf\uff08\u5982Apple AirTag\u7b49\uff09\\n\\n### BLE\uff08Bluetooth Low Energy\uff0c\u4f4e\u529f\u8017\u84dd\u7259\uff09\u5b9a\u4f4d\\n\\nBLE\u662f\u84dd\u7259\u6280\u672f\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4e13\u4e3a\u4f4e\u529f\u8017\u5e94\u7528\u8bbe\u8ba1\u3002\u5728\u5b9a\u4f4d\u9886\u57df\uff0cBLE\u4e3b\u8981\u901a\u8fc7\u4fe1\u6807\uff08Beacon\uff09\u6280\u672f\u5b9e\u73b0\u3002\\n\\n#### \u5de5\u4f5c\u539f\u7406\\nBLE\u5b9a\u4f4d\u4e3b\u8981\u57fa\u4e8eRSSI\uff08Received Signal Strength Indication\uff0c\u63a5\u6536\u4fe1\u53f7\u5f3a\u5ea6\u6307\u793a\uff09\u3002\u901a\u8fc7\u6d4b\u91cf\u63a5\u6536\u5230\u7684\u4fe1\u53f7\u5f3a\u5ea6\uff0c\u5e76\u7ed3\u5408\u8def\u5f84\u635f\u8017\u6a21\u578b\uff0c\u53ef\u4ee5\u4f30\u7b97\u8bbe\u5907\u4e0e\u4fe1\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5e38\u89c1\u7684\u534f\u8bae\u5305\u62eciBeacon\uff08\u82f9\u679c\uff09\u548cEddystone\uff08\u8c37\u6b4c\uff09\u3002\\n\\n#### \u4f18\u52bf\\n- **\u4f4e\u529f\u8017**\uff1aBLE\u8bbe\u5907\u53ef\u4ee5\u4f7f\u7528\u7ebd\u6263\u7535\u6c60\u8fd0\u884c\u6570\u6708\u751a\u81f3\u6570\u5e74\\n- **\u6210\u672c\u4f4e**\uff1aBLE\u82af\u7247\u548c\u4fe1\u6807\u4ef7\u683c\u4fbf\u5b9c\uff0c\u90e8\u7f72\u6210\u672c\u4f4e\\n- **\u517c\u5bb9\u6027\u597d**\uff1a\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u667a\u80fd\u624b\u673a\u90fd\u652f\u6301BLE\\n- **\u90e8\u7f72\u7b80\u5355**\uff1a\u65e0\u9700\u590d\u6742\u7684\u57fa\u7840\u8bbe\u65bd\\n\\n#### \u52a3\u52bf\\n- **\u7cbe\u5ea6\u6709\u9650**\uff1a\u5178\u578b\u7cbe\u5ea6\u57283-5\u7c73\uff0c\u53d7\u73af\u5883\u5f71\u54cd\u5927\\n- **\u6613\u53d7\u5e72\u6270**\uff1a\u4fe1\u53f7\u5bb9\u6613\u53d7\u5230\u4eba\u4f53\u3001\u5899\u58c1\u7b49\u969c\u788d\u7269\u7684\u5f71\u54cd\\n- **\u8ddd\u79bb\u6709\u9650**\uff1a\u6709\u6548\u8303\u56f4\u901a\u5e38\u572850\u7c73\u4ee5\u5185\\n\\n#### \u5e94\u7528\u573a\u666f\\n- \u5546\u573a\u5bfc\u822a\\n- \u5c55\u89c8\u4f1a\u4fe1\u606f\u63a8\u9001\\n- \u8d44\u4ea7\u8ffd\u8e2a\\n- \u8003\u52e4\u7cfb\u7edf\\n- \u667a\u80fd\u5bb6\u5c45\u81ea\u52a8\u5316\\n\\n### WiFi\u5b9a\u4f4d\\n\\nWiFi\u5b9a\u4f4d\u5229\u7528\u73b0\u6709\u7684WiFi\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u5ba4\u5185\u5b9a\u4f4d\uff0c\u662f\u6700\u5e7f\u6cdb\u90e8\u7f72\u7684\u5ba4\u5185\u5b9a\u4f4d\u6280\u672f\u4e4b\u4e00\u3002\\n\\n#### \u5de5\u4f5c\u539f\u7406\\nWiFi\u5b9a\u4f4d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\\n1. **\u57fa\u4e8eRSSI\u7684\u4e09\u8fb9\u6d4b\u91cf**\uff1a\u901a\u8fc7\u6d4b\u91cf\u8bbe\u5907\u4e0e\u591a\u4e2aWiFi\u63a5\u5165\u70b9\u4e4b\u95f4\u7684\u4fe1\u53f7\u5f3a\u5ea6\uff0c\u4f30\u7b97\u8ddd\u79bb\u5e76\u786e\u5b9a\u4f4d\u7f6e\\n2. **\u6307\u7eb9\u5b9a\u4f4d**\uff1a\u9884\u5148\u91c7\u96c6\u7a7a\u95f4\u4e2d\u5404\u70b9\u7684WiFi\u4fe1\u53f7\u7279\u5f81\uff0c\u5f62\u6210\\"\u6307\u7eb9\u6570\u636e\u5e93\\"\uff0c\u5b9a\u4f4d\u65f6\u5c06\u5b9e\u65f6\u91c7\u96c6\u7684\u4fe1\u53f7\u4e0e\u6570\u636e\u5e93\u5339\u914d\\n\\n#### \u4f18\u52bf\\n- **\u57fa\u7840\u8bbe\u65bd\u5e7f\u6cdb**\uff1a\u5229\u7528\u73b0\u6709WiFi\u7f51\u7edc\uff0c\u65e0\u9700\u989d\u5916\u786c\u4ef6\\n- **\u8986\u76d6\u8303\u56f4\u5927**\uff1a\u5355\u4e2a\u63a5\u5165\u70b9\u53ef\u8986\u76d6\u6570\u5341\u7c73\u8303\u56f4\\n- **\u6210\u672c\u4f4e**\uff1a\u5982\u679c\u5df2\u6709WiFi\u7f51\u7edc\uff0c\u51e0\u4e4e\u65e0\u989d\u5916\u6210\u672c\\n- **\u517c\u5bb9\u6027\u597d**\uff1a\u51e0\u4e4e\u6240\u6709\u79fb\u52a8\u8bbe\u5907\u90fd\u652f\u6301WiFi\\n\\n#### \u52a3\u52bf\\n- **\u7cbe\u5ea6\u4e00\u822c**\uff1a\u5178\u578b\u7cbe\u5ea6\u57283-15\u7c73\uff0c\u53d6\u51b3\u4e8e\u73af\u5883\u548c\u63a5\u5165\u70b9\u5bc6\u5ea6\\n- **\u6613\u53d7\u5e72\u6270**\uff1a\u4fe1\u53f7\u53d7\u73af\u5883\u53d8\u5316\u5f71\u54cd\u5927\\n- **\u529f\u8017\u8f83\u9ad8**\uff1a\u76f8\u6bd4BLE\u548cUWB\uff0cWiFi\u7684\u529f\u8017\u8f83\u9ad8\\n- **\u521d\u59cb\u5316\u590d\u6742**\uff1a\u6307\u7eb9\u5b9a\u4f4d\u9700\u8981\u524d\u671f\u5927\u91cf\u91c7\u96c6\u5de5\u4f5c\\n\\n#### \u5e94\u7528\u573a\u666f\\n- \u5927\u578b\u5efa\u7b51\u7269\u5185\u5bfc\u822a\\n- \u5546\u573a\u5ba2\u6d41\u5206\u6790\\n- \u516c\u5171\u573a\u6240\u4f4d\u7f6e\u670d\u52a1\\n- \u8d44\u4ea7\u7ba1\u7406\\n- \u667a\u80fd\u529e\u516c\\n\\n### \u4e09\u79cd\u6280\u672f\u5bf9\u6bd4\\n\\n| \u6280\u672f | \u7cbe\u5ea6 | \u529f\u8017 | \u6210\u672c | \u8986\u76d6\u8303\u56f4 | \u6297\u5e72\u6270\u80fd\u529b |\\n|------|------|------|------|----------|------------|\\n| UWB  | 10-30\u5398\u7c73 | \u4e2d\u7b49 | \u9ad8 | \u5c0f\uff08~50\u7c73\uff09 | \u5f3a |\\n| BLE  | 3-5\u7c73 | \u4f4e | \u4f4e | \u4e2d\uff08~50\u7c73\uff09 | \u5f31 |\\n| WiFi | 3-15\u7c73 | \u9ad8 | \u4f4e\uff08\u5229\u7528\u73b0\u6709\u7f51\u7edc\uff09 | \u5927\uff08~100\u7c73\uff09 | \u4e2d |\\n\\n\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8fd9\u4e09\u79cd\u6280\u672f\u5f80\u5f80\u4f1a\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u5f25\u8865\u5404\u81ea\u7684\u4e0d\u8db3\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528WiFi\u8fdb\u884c\u7c97\u7565\u5b9a\u4f4d\uff0c\u7136\u540e\u4f7f\u7528BLE\u8fdb\u884c\u533a\u57df\u786e\u8ba4\uff0c\u6700\u540e\u5728\u9700\u8981\u9ad8\u7cbe\u5ea6\u7684\u573a\u666f\u4e0b\u4f7f\u7528UWB\u8fdb\u884c\u7cbe\u786e\u5b9a\u4f4d\u3002\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Python\u68c0\u6d4bBLE\u4fe1\u53f7\u5e76\u53ef\u89c6\u5316\u5c55\u793a\u4fe1\u53f7\u5f3a\u5ea6\u3002\\n\\n## Python\u68c0\u6d4bBLE\u4fe1\u53f7\\n\\n\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Python\u6765\u68c0\u6d4b\u548c\u5206\u6790BLE\u4fe1\u53f7\u3002\u6211\u4eec\u5c06\u57fa\u4e8e[yishi-projects/ble-beacon](https://github.com/yishi-projects/ble-beacon)\u9879\u76ee\u4e2d\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002\\n\\n### \u6240\u9700\u5e93\u548c\u4f9d\u8d56\\n\\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u4ee5\u4e0bPython\u5e93\uff1a\\n\\n```bash\\npip install bleak kafka-python\\n```\\n\\n\u4e3b\u8981\u4f9d\u8d56\u5305\u62ec\uff1a\\n- **bleak**\uff1a\u8de8\u5e73\u53f0\u7684BLE\u5ba2\u6237\u7aef\u5e93\uff0c\u652f\u6301Windows\u3001macOS\u548cLinux\\n- **kafka-python**\uff1a\u7528\u4e8e\u5c06\u6570\u636e\u53d1\u9001\u5230Kafka\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u6570\u636e\u6d41\u5904\u7406\uff09\\n\\n### \u4ee3\u7801\u7ed3\u6784\\n\\n\u6211\u4eec\u7684BLE\u68c0\u6d4b\u7a0b\u5e8f\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a\\n\\n1. \u521d\u59cb\u5316\u548c\u914d\u7f6e\\n2. BLE\u8bbe\u5907\u626b\u63cf\\n3. \u4fe1\u6807\u6570\u636e\u89e3\u6790\uff08iBeacon\u3001Eddystone\u7b49\uff09\\n4. \u6570\u636e\u5904\u7406\u548c\u53ef\u89c6\u5316\\n\\n### \u521d\u59cb\u5316\u548c\u914d\u7f6e\\n\\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\u5e76\u8bbe\u7f6e\u57fa\u672c\u914d\u7f6e\uff1a\\n\\n```python\\nimport asyncio\\nfrom bleak import BleakScanner\\nimport uuid\\nimport time\\nimport datetime\\nimport os\\nimport configparser\\n\\n# \u5168\u5c40\u53d8\u91cf\u63a7\u5236\u626b\u63cf\u72b6\u6001\\n_scanning_active = False\\n\\n# \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\\ndef load_config():\\n    \\"\\"\\"\u4ece~/.ble/config.conf\u52a0\u8f7d\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\\"\\"\\"\\n    config = configparser.ConfigParser()\\n    \\n    # \u9ed8\u8ba4\u914d\u7f6e\\n    config[\'kafka\'] = {\\n        \'broker\': \'localhost:9092\',\\n        \'topic\': \'ble_beacons\'\\n    }\\n    \\n    # \u521b\u5efa\u914d\u7f6e\u76ee\u5f55\uff08\u5982\u679c\u4e0d\u5b58\u5728\uff09\\n    config_dir = os.path.expanduser(\\"~/.ble\\")\\n    os.makedirs(config_dir, exist_ok=True)\\n    \\n    config_file = os.path.join(config_dir, \\"config.conf\\")\\n    \\n    # \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\uff0c\u8bfb\u53d6\u5b83\\n    if os.path.exists(config_file):\\n        config.read(config_file)\\n    else:\\n        # \u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\\n        with open(config_file, \'w\') as f:\\n            config.write(f)\\n    \\n    return config\\n```\\n\\n### BLE\u8bbe\u5907\u626b\u63cf\\n\\nBLE\u8bbe\u5907\u626b\u63cf\u662f\u6574\u4e2a\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\u3002\u6211\u4eec\u4f7f\u7528`bleak`\u5e93\u7684`BleakScanner`\u6765\u5f02\u6b65\u626b\u63cf\u5468\u56f4\u7684BLE\u8bbe\u5907\uff1a\\n\\n```python\\nasync def scan_ble_devices():\\n    \\"\\"\\"\u626b\u63cfBLE\u8bbe\u5907\u5e76\u5904\u7406\u4fe1\u6807\u6570\u636e\\"\\"\\"\\n    # \u83b7\u53d6\u4e3b\u673aID\uff08\u7528\u4e8e\u6570\u636e\u6807\u8bc6\uff09\\n    host_id = get_host_id()\\n    \\n    # \u8ba1\u6570\u5668\uff08\u7528\u4e8e\u65e5\u5fd7\uff09\\n    scan_count = 0\\n    \\n    # \u8bbe\u7f6e\u626b\u63cf\u72b6\u6001\\n    global _scanning_active\\n    _scanning_active = True\\n    \\n    try:\\n        # \u6301\u7eed\u626b\u63cf\u5faa\u73af\\n        while _scanning_active:\\n            scan_count += 1\\n            \\n            # \u626b\u63cf\u8bbe\u5907\uff08\u8d85\u65f61\u79d2\uff09\\n            devices = await BleakScanner.discover(timeout=1.0)\\n            \\n            # \u68c0\u67e5\u662f\u5426\u5e94\u8be5\u505c\u6b62\u626b\u63cf\\n            if not _scanning_active:\\n                break\\n            \\n            # \u5904\u7406\u6bcf\u4e2a\u8bbe\u5907\\n            beacons_found = 0\\n            for device in devices:\\n                # \u63d0\u53d6\u5236\u9020\u5546\u6570\u636e\\n                if device.metadata.get(\'manufacturer_data\'):\\n                    for company_code, data in device.metadata[\'manufacturer_data\'].items():\\n                        # \u68c0\u6d4b\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u6807\\n                        process_beacon_data(company_code, data, device)\\n            \\n            # \u7b49\u5f85\u4e0b\u4e00\u6b21\u626b\u63cf\\n            await asyncio.sleep(0)\\n    finally:\\n        # \u6e05\u7406\u8d44\u6e90\\n        pass\\n```\\n\\n### \u4fe1\u6807\u6570\u636e\u89e3\u6790\\n\\nBLE\u4fe1\u6807\u6709\u591a\u79cd\u7c7b\u578b\uff0c\u6700\u5e38\u89c1\u7684\u662fiBeacon\uff08\u82f9\u679c\uff09\u548cEddystone\uff08\u8c37\u6b4c\uff09\u3002\u6211\u4eec\u9700\u8981\u6839\u636e\u4e0d\u540c\u7684\u534f\u8bae\u683c\u5f0f\u89e3\u6790\u6570\u636e\uff1a\\n\\n```python\\ndef process_beacon_data(company_code, data, device):\\n    \\"\\"\\"\u6839\u636e\u4e0d\u540c\u7684\u4fe1\u6807\u7c7b\u578b\u89e3\u6790\u6570\u636e\\"\\"\\"\\n    # \u68c0\u67e5iBeacon\uff08\u82f9\u679c\u516c\u53f8\u4ee3\u7801\u662f0x004C\uff09\\n    if company_code == 0x004C and len(data) >= 23:\\n        try:\\n            # \u68c0\u67e5iBeacon\u6807\u8bc6\u7b26\uff080x02, 0x15\uff09\\n            if data[0] == 0x02 and data[1] == 0x15:\\n                # \u89e3\u6790iBeacon\u6570\u636e\\n                uuid_bytes = data[2:18]\\n                uuid_str = str(uuid.UUID(bytes=bytes(uuid_bytes)))\\n                major = int.from_bytes(data[18:20], byteorder=\'big\')\\n                minor = int.from_bytes(data[20:22], byteorder=\'big\')\\n                tx_power = data[22] - 256 if data[22] > 127 else data[22]\\n                \\n                beacon_data = {\\n                    \'uuid\': uuid_str,\\n                    \'major\': major,\\n                    \'minor\': minor,\\n                    \'tx_power\': tx_power,\\n                    \'rssi\': device.rssi,\\n                    \'address\': device.address,\\n                    \'name\': device.name or \'Unknown\'\\n                }\\n                \\n                # \u5904\u7406iBeacon\u6570\u636e\\n                process_beacon(\'iBeacon\', beacon_data)\\n        except Exception as e:\\n            print(f\\"\u5904\u7406iBeacon\u6570\u636e\u65f6\u51fa\u9519: {e}\\")\\n    \\n    # \u68c0\u67e5Eddystone\u4fe1\u6807\uff08\u8c37\u6b4c\u516c\u53f8\u4ee3\u7801\u662f0x00AA\uff09\\n    elif company_code == 0x00AA and len(data) >= 20:\\n        try:\\n            # \u68c0\u67e5Eddystone\u6807\u8bc6\u7b26\\n            if data[0] == 0xAA and data[1] == 0xFE:\\n                frame_type = data[2]\\n                \\n                # Eddystone-UID\\n                if frame_type == 0x00:\\n                    namespace = bytes(data[3:13]).hex()\\n                    instance = bytes(data[13:19]).hex()\\n                    \\n                    beacon_data = {\\n                        \'namespace\': namespace,\\n                        \'instance\': instance,\\n                        \'rssi\': device.rssi,\\n                        \'address\': device.address,\\n                        \'name\': device.name or \'Unknown\'\\n                    }\\n                    \\n                    # \u5904\u7406Eddystone-UID\u6570\u636e\\n                    process_beacon(\'Eddystone-UID\', beacon_data)\\n                \\n                # Eddystone-URL\\n                elif frame_type == 0x10:\\n                    url_scheme = [\'http://www.\', \'https://www.\', \'http://\', \'https://\'][data[3]]\\n                    url_data = bytes(data[4:]).decode(\'ascii\')\\n                    url = url_scheme + url_data\\n                    \\n                    beacon_data = {\\n                        \'url\': url,\\n                        \'rssi\': device.rssi,\\n                        \'address\': device.address,\\n                        \'name\': device.name or \'Unknown\'\\n                    }\\n                    \\n                    # \u5904\u7406Eddystone-URL\u6570\u636e\\n                    process_beacon(\'Eddystone-URL\', beacon_data)\\n        except Exception as e:\\n            print(f\\"\u5904\u7406Eddystone\u6570\u636e\u65f6\u51fa\u9519: {e}\\")\\n```\\n\\n### \u6570\u636e\u5904\u7406\u548c\u53ef\u89c6\u5316\\n\\n\u6536\u96c6\u5230\u7684BLE\u4fe1\u53f7\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\u548c\u53ef\u89c6\u5316\uff1a\\n\\n1. **\u5b9e\u65f6\u663e\u793a**\uff1a\u4f7f\u7528GUI\u5e93\uff08\u5982Tkinter\u3001PyQt\u7b49\uff09\u5b9e\u65f6\u663e\u793a\u68c0\u6d4b\u5230\u7684\u8bbe\u5907\u548c\u4fe1\u53f7\u5f3a\u5ea6\\n2. **\u6570\u636e\u5b58\u50a8**\uff1a\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6\u6216\u6570\u636e\u5e93\u4e2d\\n3. **\u6570\u636e\u6d41\u5904\u7406**\uff1a\u4f7f\u7528Kafka\u7b49\u6d88\u606f\u961f\u5217\u8fdb\u884c\u5b9e\u65f6\u6570\u636e\u6d41\u5904\u7406\\n4. **\u4fe1\u53f7\u5f3a\u5ea6\u53ef\u89c6\u5316**\uff1a\u4f7f\u7528matplotlib\u7b49\u5e93\u7ed8\u5236\u4fe1\u53f7\u5f3a\u5ea6\u70ed\u56fe\u6216\u65f6\u95f4\u5e8f\u5217\u56fe\\n\\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u5904\u7406\u51fd\u6570\u793a\u4f8b\uff1a\\n\\n```python\\ndef process_beacon(beacon_type, beacon_data):\\n    \\"\\"\\"\u5904\u7406\u4fe1\u6807\u6570\u636e\\"\\"\\"\\n    timestamp = datetime.datetime.now().isoformat()\\n    \\n    # \u6dfb\u52a0\u901a\u7528\u5b57\u6bb5\\n    message = {\\n        \'type\': beacon_type,\\n        \'timestamp\': timestamp,\\n        \'rssi\': beacon_data.get(\'rssi\', 0),\\n        \'address\': beacon_data.get(\'address\', \'unknown\')\\n    }\\n    \\n    # \u6dfb\u52a0\u7279\u5b9a\u7c7b\u578b\u7684\u5b57\u6bb5\\n    message.update(beacon_data)\\n    \\n    # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u6570\u636e\u5904\u7406\u903b\u8f91\\n    # \u4f8b\u5982\uff1a\u4fdd\u5b58\u5230\u6587\u4ef6\u3001\u53d1\u9001\u5230\u670d\u52a1\u5668\u3001\u66f4\u65b0GUI\u7b49\\n    \\n    return message\\n```\\n\\n### \u5b8c\u6574\u793a\u4f8b\\n\\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u4f46\u5b8c\u6574\u7684BLE\u626b\u63cf\u5668\u793a\u4f8b\uff0c\u5b83\u4f1a\u626b\u63cf\u5468\u56f4\u7684BLE\u8bbe\u5907\u5e76\u6253\u5370\u51fa\u68c0\u6d4b\u5230\u7684\u4fe1\u6807\u4fe1\u606f\uff1a\\n\\n```python\\nimport asyncio\\nfrom bleak import BleakScanner\\nimport uuid\\nimport datetime\\n\\nasync def main():\\n    print(\\"\u5f00\u59cb\u626b\u63cfBLE\u8bbe\u5907...\\")\\n    \\n    # \u626b\u63cf\u8bbe\u5907\\n    devices = await BleakScanner.discover(timeout=5.0)\\n    \\n    print(f\\"\u53d1\u73b0 {len(devices)} \u4e2a\u8bbe\u5907\\")\\n    \\n    # \u5904\u7406\u6bcf\u4e2a\u8bbe\u5907\\n    for device in devices:\\n        print(f\\"\u8bbe\u5907: {device.address} ({device.name or \'Unknown\'}), RSSI: {device.rssi}\\")\\n        \\n        # \u63d0\u53d6\u5236\u9020\u5546\u6570\u636e\\n        if device.metadata.get(\'manufacturer_data\'):\\n            for company_code, data in device.metadata[\'manufacturer_data\'].items():\\n                # \u68c0\u67e5iBeacon\\n                if company_code == 0x004C and len(data) >= 23:\\n                    if data[0] == 0x02 and data[1] == 0x15:\\n                        # \u89e3\u6790iBeacon\u6570\u636e\\n                        uuid_bytes = data[2:18]\\n                        uuid_str = str(uuid.UUID(bytes=bytes(uuid_bytes)))\\n                        major = int.from_bytes(data[18:20], byteorder=\'big\')\\n                        minor = int.from_bytes(data[20:22], byteorder=\'big\')\\n                        \\n                        print(f\\"  iBeacon: UUID={uuid_str}, Major={major}, Minor={minor}\\")\\n\\nif __name__ == \\"__main__\\":\\n    asyncio.run(main())\\n```\\n\\n### \u4fe1\u53f7\u5f3a\u5ea6\u53ef\u89c6\u5316\\n\\n\u4e3a\u4e86\u66f4\u76f4\u89c2\u5730\u5c55\u793aBLE\u4fe1\u53f7\u5f3a\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528matplotlib\u5e93\u521b\u5efa\u53ef\u89c6\u5316\u56fe\u8868\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u5982\u4f55\u7ed8\u5236\u4fe1\u53f7\u5f3a\u5ea6\u968f\u65f6\u95f4\u53d8\u5316\u7684\u56fe\u8868\uff1a\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\nimport time\\nimport asyncio\\nfrom bleak import BleakScanner\\n\\nasync def monitor_device(address, duration=60):\\n    \\"\\"\\"\u76d1\u63a7\u7279\u5b9a\u8bbe\u5907\u7684\u4fe1\u53f7\u5f3a\u5ea6\\"\\"\\"\\n    timestamps = []\\n    rssi_values = []\\n    \\n    start_time = time.time()\\n    end_time = start_time + duration\\n    \\n    while time.time() < end_time:\\n        # \u626b\u63cf\u8bbe\u5907\\n        devices = await BleakScanner.discover(timeout=1.0)\\n        \\n        # \u67e5\u627e\u76ee\u6807\u8bbe\u5907\\n        for device in devices:\\n            if device.address == address:\\n                # \u8bb0\u5f55\u65f6\u95f4\u548cRSSI\\n                timestamps.append(time.time() - start_time)\\n                rssi_values.append(device.rssi)\\n                print(f\\"\u65f6\u95f4: {timestamps[-1]:.1f}s, RSSI: {rssi_values[-1]} dBm\\")\\n                break\\n        \\n        # \u7b49\u5f85\u4e0b\u4e00\u6b21\u626b\u63cf\\n        await asyncio.sleep(0.5)\\n    \\n    # \u7ed8\u5236\u56fe\u8868\\n    plt.figure(figsize=(10, 6))\\n    plt.plot(timestamps, rssi_values, \'b-\')\\n    plt.xlabel(\'\u65f6\u95f4 (\u79d2)\')\\n    plt.ylabel(\'\u4fe1\u53f7\u5f3a\u5ea6 (dBm)\')\\n    plt.title(f\'\u8bbe\u5907 {address} \u7684BLE\u4fe1\u53f7\u5f3a\u5ea6\')\\n    plt.grid(True)\\n    plt.savefig(\'ble_signal_strength.png\')\\n    plt.show()\\n\\n# \u4f7f\u7528\u793a\u4f8b\\n# asyncio.run(monitor_device(\'XX:XX:XX:XX:XX:XX\', 60))\\n```\\n\\n## iOS\u4e2d\u76d1\u542ciBeacon\u4fe1\u53f7\\n\\n\u5728iOS\u4e2d\uff0c\u6cdb\u7528\u7684BLE\u76d1\u542c\u65e0\u6cd5\u4e89\u53d6\u7684\u83b7\u53d6iBeacon\u7684\u4fe1\u53f7\u6570\u636e\uff0c\u5c24\u5176\u662fUUID\u3001Major\u3001Minor\u7b49\u4fe1\u606f\u5c06\u65e0\u6cd5\u83b7\u53d6\u3002\\n\\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7279\u522b\u7684\u5236\u5b9a\u4f60\u8981\u76d1\u542c\u7684UUID\u6765\u8fdb\u884c\u76d1\u542c\u3002\\n\\n### \u84dd\u7259\u540e\u53f0\u8fd0\u884c\u7684\u65f6\u95f4\u95ee\u9898\\n\\n\u84dd\u7259\u540e\u53f0\u6a21\u5f0f\u65e0\u6cd5\u4fdd\u6301\u6301\u7eed\u4e0d\u65ad\u7684\u8fd0\u884c\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f9d\u9760\u5176\u540e\u53f0\u6a21\u5f0f\u6301\u7eed\u4e0d\u65ad\u7684\u8fdb\u884c\u3002\\n\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6709\u8f83\u957f\u65f6\u95f4\u6301\u7eed\u4e0d\u65ad\u7684\u8fd0\u884c\u7684\u9700\u6c42\uff0c\u9700\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u7f6e\u5728\u5e94\u7528\u524d\u7aef\u3002\\n\\n\u5728\u8fdb\u884c\u5c4f\u5e55\u5207\u5206\u7684\u72b6\u6001\uff0c\u5de6\u53f3\u4e24\u8fb9\u7684\u7a0b\u5e8f\uff0c\u90fd\u4f1a\u8ba4\u4e3a\u662f\u5728\u6301\u7eed\u8fd0\u884c\u72b6\u6001\u3002\\n\\n\u5373\u4f7f\u662f\u82f9\u679c\u4f01\u4e1a\u7248\u7528\u6237\uff0c\u4e5f\u65e0\u6cd5\u5f3a\u5236\u8ba9\u67d0\u4e00\u4e2a\u5e94\u7528\u957f\u65f6\u95f4\u5728\u540e\u53f0\u8fd0\u884c\u3002\\n\\n## \u603b\u7ed3\\n\\n\u901a\u8fc7Python\u548cbleak\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u68c0\u6d4b\u548c\u5206\u6790BLE\u4fe1\u53f7\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u591a\u79cd\u5e94\u7528\u573a\u666f\uff0c\u5982\u5ba4\u5185\u5b9a\u4f4d\u3001\u8d44\u4ea7\u8ffd\u8e2a\u3001\u5b58\u5728\u68c0\u6d4b\u7b49\u3002\\n\\n\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6269\u5c55\u4e0a\u8ff0\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a\\n\\n- \u6dfb\u52a0\u8ddd\u79bb\u4f30\u7b97\uff08\u57fa\u4e8eRSSI\u548c\u8def\u5f84\u635f\u8017\u6a21\u578b\uff09\\n- \u5b9e\u73b0\u4e09\u8fb9\u6d4b\u91cf\u5b9a\u4f4d\u7b97\u6cd5\\n- \u5f00\u53d1\u5b9e\u65f6\u76d1\u63a7\u4eea\u8868\u677f\\n- \u96c6\u6210\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8fdb\u884c\u6a21\u5f0f\u8bc6\u522b\\n\\nBLE\u4fe1\u6807\u6280\u672f\u7ed3\u5408Python\u7684\u7075\u6d3b\u6027\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5404\u79cd\u667a\u80fd\u7a7a\u95f4\u5e94\u7528\u3002\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- [yishi-projects/ble-beacon](https://github.com/yishi-projects/ble-beacon) - BLE\u4fe1\u6807\u68c0\u6d4b\u9879\u76ee\\n- [Bleak\u6587\u6863](https://bleak.readthedocs.io/) - \u8de8\u5e73\u53f0BLE\u5ba2\u6237\u7aef\u5e93\\n- [\u84dd\u7259SIG](https://www.bluetooth.com/) - \u84dd\u7259\u6280\u672f\u6807\u51c6"},{"id":"ml-env-setup","metadata":{"permalink":"/eason-blog/blog/ml-env-setup","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-18-ml-env-setup/index.md","source":"@site/blog/2025-02-18-ml-env-setup/index.md","title":"\u57fa\u4e8eDocker\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u73af\u5883","description":"\u5728\u6211\u4eec\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u7684\u8fc7\u8f66\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5b9e\u9a8c\u73af\u5883\u3002","date":"2025-02-18T00:00:00.000Z","tags":[{"inline":false,"label":"Machine Learning","permalink":"/eason-blog/blog/tags/machine-learning","description":"Machine Learning related posts"}],"readingTime":8.53,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"ml-env-setup","title":"\u57fa\u4e8eDocker\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u73af\u5883","authors":"eason","tags":["ml"]},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528Python\u68c0\u6d4b\u84dd\u7259\u4fe1\u53f7","permalink":"/eason-blog/blog/ble-beacon"},"nextItem":{"title":"\u4f7f\u7528MLflow\u548cRay\u8bad\u7ec3fastText","permalink":"/eason-blog/blog/fasttext"}},"content":"\u5728\u6211\u4eec\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u7684\u8fc7\u8f66\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5b9e\u9a8c\u73af\u5883\u3002\\n\u6bd4\u5982\u5df2\u7ecf\u9884\u5236\u5b89\u88c5\u597dPython\u73af\u5883\uff0c\u4ee5\u53ca\u5e38\u7528\u7684Python\u5305\uff0c\u6bd4\u5982sklearn, seaborn\u7b49\u5de5\u5177\u3002\\n\\n\u4e3a\u4e86\u5c06\u9694\u7edd\u4e0d\u540c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u6211\u4eec\u672c\u6587\u4e2d\u4f7f\u7528Docker\u6765\u6784\u5efa\u76f8\u5173\u7684\u73af\u5883\uff0c\\n\u4ee5\u4fbf\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u7684\u5f00\u53d1\u5de5\u4f5c\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u80cc\u666f\u4ecb\u7ecd\\n\\n\u5728\u65e5\u5e38\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6848\u662f\u901a\u8fc7\u4e0b\u8f7d\u5b89\u88c5[Anaconda](https://www.anaconda.com/)\uff0c\\n\u5e76\u901a\u8fc7`conda`\u547d\u4ee4\u6765\u7ba1\u7406\u4e0d\u540c\u7684\u73af\u5883\u3002\\n\\n![Anaconda Logo](./anaconda_secondary_logo.svg)\\n\\n\u6216\u8005\u662f\u901a\u8fc7Python\u7684[venv](https://docs.python.org/3/library/venv.html)\u7b49\u5de5\u5177\uff0c\\n\u6765\u6784\u5efa\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u73af\u5883\u3002\\n\\n\u867d\u7136\u8fd9\u4e9b\u8bbe\u7f6e\u6709\u4e00\u5b9a\u7684\u9694\u79bb\u6027\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u591f\u5f7b\u5e95\u3002\\n\\n\u56e0\u6b64\uff0c\u672c\u6587\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u57fa\u4e8eDocker\u7684\u65b9\u6848\u3002\u6765\u6784\u5efa\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u6240\u5fc5\u8981\u7684\u5f00\u53d1\u73af\u5883\u3002\\n\\n\u6211\u4eec\u7684\u76ee\u6807\u7528\u6237\u4e3b\u8981\u662f\u90a3\u4e9b\u4f7f\u7528\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u89e3\u51b3\u6bd4\u8f83\u7b80\u5355\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u7684\u5de5\u7a0b\u5e08\u3002\\n\u9488\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u5f00\u53d1\u73af\u5883\uff0c\u6211\u4eec\u4e5f\u4f1a\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002\\n\\n## Jupyter\\n\\n\u5bf9\u4e8e\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u4f7f\u7528\u6700\u591a\u7684\u5f00\u53d1\u73af\u5883\uff0c\\n\u80af\u5b9a\u662f[Jupyter](https://jupyter.org/)\u73af\u5883\uff0c\\n\u5c24\u5176\u662f[Jupyter Lab](https://github.com/jupyterlab)\\n\u8fd9\u6837\u7684\u4e92\u52a8\u5f00\u53d1\u73af\u5883\u3002\\n\\n![Jupyter Logo](./jupyter-logo.png)\\n\\nJupyter\u9879\u76ee\u7ec4\uff0c\u9488\u5bf9Docker\u7684\u90e8\u7f72\u65b9\u5f0f\uff0c\u4e13\u95e8\u6709\u4e00\u4e2a\u72ec\u7acb\u9879\u76ee\u6765\u4ecb\u7ecd\u76f8\u5173\u7684Docker\u955c\u50cf\uff1a\\n[Jupyter Docker Stacks](https://jupyter-docker-stacks.readthedocs.io/)\\n\\n\u5728\u8be5\u9879\u76ee\u4e2d\uff0c\u6709\u591a\u4e2a\u955c\u50cf\u53ef\u4f9b\u9009\u62e9\uff0c\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u7684\u56fe\u6765\u8be6\u7ec6\u89e3\u91ca\u4e0b\uff1a\\n\\n![Jupyter Docker Images](./docker-images.svg)\\n\\n\u4e3a\u4e86\u6700\u5927\u5316\u6211\u4eec\u7684\u4fbf\u5229\u7a0b\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u76ee\u7684\u7684\u9009\u62e9\u57fa\u4e8e`scipy-notebook`\u7684\u955c\u50cf\uff0c\u5373\uff1a\\n\\n- `datascience-notebook`\uff1a\u5176\u5305\u542b\u4e86`scipy-notebook`\u4ee5\u53ca\u9488\u5bf9R\u548cJulia\u8bed\u8a00\u7684\u652f\u6301\u3002\\n- `tensorflow-notebook`\uff1a\u5176\u5305\u542b\u4e86`scipy-notebook`\u4ee5\u53ca\u9488\u5bf9[Tensorflow](https://www.tensorflow.org/)\u7684\u652f\u6301\u3002\\n- `pytorch-notebook`\uff1a\u5176\u5305\u542b\u4e86`scipy-notebook`\u4ee5\u53ca\u9488\u5bf9[PyTorch](https://pytorch.org/)\u7684\u652f\u6301\u3002\\n- `pyspark-notebook`\uff1a\u5176\u5305\u542b\u4e86`scipy-notebook`\u4ee5\u53ca\u9488\u5bf9\\n  [PySpark](https://spark.apache.org/docs/latest/api/python/index.html)\u7684\u652f\u6301\u3002\\n\\n\u7531\u4e8e\u6211\u4eec\u5728\u672c\u6587\u4e2d\u7684\u76ee\u6807\u662f\u9488\u5bf9\u6bd4\u8f83\u5927\u4f17\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fdb\u884c\u5f00\u53d1\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u9009\u62e9`datascience-notebook`\u8fd9\u4e2a\u7248\u672c\u7684\u955c\u50cf\u8fdb\u884c\u4ecb\u7ecd\u3002\\n\\n## Docker\u8fd0\u884c\\n\\n\u6211\u4eec\u5728\u672c\u8282\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Docker\u6765\u8fd0\u884c\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u5728\u8fd0\u884c\u524d\uff0c\u6211\u4eec\u9700\u8981\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u671f\u671b\u7684\u8981\u6c42\uff1a\\n\\n1. \u9996\u5148\u8981\u6253\u901a\u5bb9\u5668\u5185\u7684\u6587\u4ef6\u548c\u5bbf\u4e3b\u673a\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u6302\u8f7d\u5bbf\u4e3b\u673a\u7684\u6587\u4ef6\u5939\u5230\u5bb9\u5668\u5185\u3002\\n   \u8fd9\u6837\u65b9\u4fbf\u6211\u4eec\u4fdd\u7559\u64cd\u4f5c\u8fc7\u7684\u6570\u636e\uff0c\u4e0d\u81f3\u4e8e\u5bb9\u5668\u5173\u95ed\u540e\uff0c\u6570\u636e\u4e22\u5931\u3002\\n2. \u6211\u4eec\u9700\u8981\u901a\u8fc7\u7aef\u53e3\u53ef\u4ee5\u8bbf\u95ee\u5230Jupyter Lab\u7684\u7f51\u9875\u754c\u9762\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\uff0c\u5c06\u5bb9\u5668\u5185\u7684\u7aef\u53e3\uff0c\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u4e0a\u3002\\n3. \u6211\u4eec\u5e0c\u671b\u5728\u5bb9\u5668\u5185\u4ee5\u7ba1\u7406\u5458\u6743\u9650\u542f\u52a8\u5bb9\u5668\uff0c\u8fd9\u6837\u5728\u5bb9\u5668\u4e2d\uff0c\u65b9\u4fbf\u6211\u4eec\u4ee5\u7ba1\u7406\u5458\uff08root\uff09\u6743\u9650\u5b89\u88c5\u6216\u4fee\u6539\u914d\u7f6e\u7b49\u3002\\n4. \u6211\u4eec\u5e0c\u671b\u5728\u5bb9\u5668\u4e2d\u5b89\u88c5\u7684\u989d\u5916Python\u5305\u6587\u4ef6\uff0c\u5728\u91cd\u542f\u5bb9\u5668\u540e\uff0c\u4f9d\u7136\u4e88\u4ee5\u4fdd\u5b58\u3002\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u542f\u52a8\u547d\u4ee4\uff0c\u6765\u542f\u52a8\u76f8\u5173\u7684\u5bb9\u5668\u6765\u6ee1\u8db3\u6211\u4eec\u4e0a\u8ff0\u7684\u8981\u6c42\uff1a\\n\\n```shell\\n# Create volume before using it\\ndocker volume create jupyter-data\\n\\n# Run docker container\\ndocker run -d \\\\\\n    --name jupyter-ds \\\\\\n    -p 28888:8888 \\\\\\n    -v \\"$HOME/_jupyter_mount\\":/home/jovyan/work \\\\\\n    -v \\"$(pwd)\\":/home/jovyan/pwd \\\\\\n    -v jupyter-data:/home/jovyan/.local \\\\\\n    --user root \\\\\\n    -e GRANT_SUDO=yes \\\\\\n    -e CHOWN_HOME=yes \\\\\\n    -e CHOWN_HOME_OPTS=\'-R\' \\\\\\n    jupyter/datascience-notebook\\n```\\n\\n\u8ba9\u6211\u4eec\u6765\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u547d\u4ee4\u7684\u5404\u4e2a\u53c2\u6570\uff1a\\n\\n- `-d`: \u4ee5\u540e\u53f0\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\\n- `--name jupyter-ds`: \u7ed9\u5bb9\u5668\u6307\u5b9a\u4e00\u4e2a\u540d\u79f0\uff0c\u65b9\u4fbf\u540e\u7eed\u7ba1\u7406\\n- `-p 28888:8888`: \u5c06\u5bb9\u5668\u5185\u7684 8888 \u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7684 28888 \u7aef\u53e3\\n- `-v \\"$HOME/_jupyter_mount\\":/home/jovyan/work`: \u5c06\u7528\u6237\u76ee\u5f55\u4e0b\u7684`_jupyter_mount`\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u5185\u7684\u5de5\u4f5c\u76ee\u5f55\\n- `-v \\"$(pwd)\\":/home/jovyan/pwd`: \u5c06\u5f53\u524d\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d\u7684`pwd`\u76ee\u5f55\u4e2d\\n- `-v jupyter-data:/home/jovyan/.local`: \u521b\u5efa\u4e00\u4e2a\u547d\u540d\u5377\u6765\u6301\u4e45\u5316\u5b58\u50a8\u7528\u6237\u5b89\u88c5\u7684\u5305\\n- `--user root`: \u4ee5 root \u7528\u6237\u8fd0\u884c\u5bb9\u5668\\n- `-e GRANT_SUDO=yes`: \u5141\u8bb8\u4f7f\u7528 sudo \u547d\u4ee4\\n- `-e CHOWN_HOME=yes`: \u5728\u5bb9\u5668\u542f\u52a8\u65f6\u81ea\u52a8\u4fee\u6539 home \u76ee\u5f55\u7684\u6240\u6709\u6743\\n- `-e CHOWN_HOME_OPTS=\'-R\'`: \u9012\u5f52\u4fee\u6539\u6240\u6709\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u6240\u6709\u6743\uff0c\u786e\u4fdd\u5b8c\u6574\u7684\u6743\u9650\u8bbe\u7f6e\\n- `jupyter/datascience-notebook`: \u4f7f\u7528\u7684\u955c\u50cf\u540d\u79f0\\n\\n\u542f\u52a8\u5bb9\u5668\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b Jupyter Lab \u7684\u8bbf\u95ee\u94fe\u63a5\uff08\u4ee5\u53ca\u8bbf\u95ee\u5bc6\u7801\uff09\uff1a\\n\\n```shell\\ndocker logs jupyter-ds\\n```\\n\\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u672c\u5730\u7684\u670d\u52a1\u5730\u5740\uff1a[http://localhost:28888](http://localhost:28888)\u6765\u8bbf\u95ee\u6211\u4eec\u7684Jupyter Lab\u670d\u52a1\u3002\\n\u767b\u9646\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u754c\u9762\uff1a\\n\\n![Jupyter Lab Landing Page](./jupyter-lab-landing-page.png)\\n\\n## \u5305\u7ba1\u7406\\n\\n\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u989d\u5916\u7684Python\u5305\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86\u6570\u636e\u5377\u6765\u4fdd\u5b58`.local`\u76ee\u5f55\uff0c\\n\u6240\u4ee5\u5b89\u88c5\u7684\u5305\u4f1a\u88ab\u6301\u4e45\u5316\u4fdd\u5b58\u3002\u4ee5\u4e0b\u662f\u5b89\u88c5\u5305\u7684\u51e0\u79cd\u65b9\u5f0f\uff1a\\n\\n1. \u901a\u8fc7Jupyter Lab\u7684\u7ec8\u7aef\u5b89\u88c5\uff1a\\n\\n    ```shell\\n    pip install --user package_name\\n    ```\\n\\n2. \u901a\u8fc7\u5bb9\u5668\u5916\u90e8\u5b89\u88c5\uff1a\\n\\n    ```shell\\n    docker exec -it jupyter-ds pip install --user package_name\\n    ```\\n\\n3. \u901a\u8fc7requirements.txt\u6279\u91cf\u5b89\u88c5\uff1a\\n\\n    ```shell\\n    # \u9996\u5148\u521b\u5efarequirements.txt\u6587\u4ef6\\n    echo \\"pandas==2.0.0\\n    scikit-learn==1.2.0\\n    matplotlib==3.7.0\\" > requirements.txt\\n\\n    # \u5c06\u6587\u4ef6\u590d\u5236\u5230\u5bb9\u5668\u5185\\n    docker cp requirements.txt jupyter-ds:/tmp/\\n\\n    # \u5728\u5bb9\u5668\u5185\u5b89\u88c5\\n    docker exec -it jupyter-ds pip install --user -r /tmp/requirements.txt\\n    ```\\n\\n\u6ce8\u610f\uff1a\u4f7f\u7528`--user`\u53c2\u6570\u53ef\u4ee5\u786e\u4fdd\u5305\u88ab\u5b89\u88c5\u5230\u7528\u6237\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6743\u9650\u95ee\u9898\uff0c\\n\u5e76\u4e14\u7531\u4e8e\u6211\u4eec\u6302\u8f7d\u4e86\u6570\u636e\u5377\uff0c\u8fd9\u4e9b\u5305\u4f1a\u88ab\u6301\u4e45\u5316\u4fdd\u5b58\u3002\\n\\n## \u5bb9\u5668\u7ba1\u7406\\n\\n\u5728\u65e5\u5e38\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5bf9\u5bb9\u5668\u8fdb\u884c\u4e00\u4e9b\u7ba1\u7406\u64cd\u4f5c\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u547d\u4ee4\uff1a\\n\\n```shell\\n# \u505c\u6b62\u5bb9\u5668\\ndocker stop jupyter-ds\\n\\n# \u542f\u52a8\u5df2\u5b58\u5728\u7684\u5bb9\u5668\\ndocker start jupyter-ds\\n\\n# \u91cd\u542f\u5bb9\u5668\\ndocker restart jupyter-ds\\n\\n# \u5220\u9664\u5bb9\u5668\uff08\u9700\u8981\u5148\u505c\u6b62\u5bb9\u5668\uff09\\ndocker rm jupyter-ds\\n\\n# \u67e5\u770b\u5bb9\u5668\u65e5\u5fd7\\ndocker logs jupyter-ds\\n\\n# \u8fdb\u5165\u5bb9\u5668\u5185\u90e8\u6267\u884c\u547d\u4ee4\\ndocker exec -it jupyter-ds bash\\n```\\n\\n\u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u7ba1\u7406\u4f60\u7684Jupyter\u73af\u5883\u3002\u7279\u522b\u662f\u5f53\u4f60\u9700\u8981\u5b89\u88c5\u65b0\u7684\u5305\u6216\u8005\u8c03\u8bd5\u73af\u5883\u95ee\u9898\u65f6\uff0c\\n\u4f7f\u7528`docker exec`\u547d\u4ee4\u8fdb\u5165\u5bb9\u5668\u5185\u90e8\u4f1a\u975e\u5e38\u6709\u7528\u3002\\n\\n## \u603b\u7ed3\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Jupyter\u7684\u591a\u4e2aDocker\u955c\u50cf\u7248\u672c\uff0c\\n\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528Docker\u6765\u5feb\u901f\u6784\u5efa\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7684\u5f00\u53d1\u73af\u5883\u3002\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0d\u540c\u7248\u672c\u7684\u955c\u50cf\u4e2d\uff0c\u53ef\u80fd\u5b58\u5728\u7248\u672c\u4e0d\u517c\u5bb9\u7684\u73b0\u8c61\u3002\\n\u6bd4\u5982\u9700\u8981\u4f7f\u7528Tensorflow\u7684\u4e13\u6709\u529f\u80fd\uff0c\u8fd8\u662f\u9700\u8981\u4f7f\u7528\u76f8\u5e94\u7684\u955c\u50cf\u7248\u672c\u3002\\n\\n\u5728\u4f7f\u7528\u8fd9\u4e2a\u73af\u5883\u65f6\uff0c\u6709\u4e00\u4e9b\u5b89\u5168\u6ce8\u610f\u4e8b\u9879\uff1a\\n\\n1. \u867d\u7136\u6211\u4eec\u4f7f\u7528\u4e86root\u6743\u9650\u542f\u52a8\u5bb9\u5668\uff0c\u4f46\u5728\u65e5\u5e38\u4f7f\u7528\u4e2d\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528root\u6743\u9650\u64cd\u4f5c\u3002\\n2. \u5efa\u8bae\u4fee\u6539\u9ed8\u8ba4\u7684Jupyter\u767b\u5f55\u5bc6\u7801\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf`JUPYTER_TOKEN`\u6765\u5b9e\u73b0\u3002\\n3. \u5982\u679c\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\uff0c\u5efa\u8bae\u914d\u7f6eHTTPS\uff0c\u5e76\u9650\u5236\u8bbf\u95eeIP\u3002\\n4. \u5b9a\u671f\u66f4\u65b0Docker\u955c\u50cf\u4ee5\u83b7\u53d6\u5b89\u5168\u8865\u4e01\u3002"},{"id":"fasttext","metadata":{"permalink":"/eason-blog/blog/fasttext","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-16-fasttext/index.md","source":"@site/blog/2025-02-16-fasttext/index.md","title":"\u4f7f\u7528MLflow\u548cRay\u8bad\u7ec3fastText","description":"fastText\u662fFacebook\u7814\u53d1\u7684\u4e00\u6b3e\u9488\u5bf9NLP\u9886\u57df\u7684\u89e3\u51b3\u65b9\u6848\u3002","date":"2025-02-16T00:00:00.000Z","tags":[{"inline":false,"label":"Machine Learning","permalink":"/eason-blog/blog/tags/machine-learning","description":"Machine Learning related posts"},{"inline":false,"label":"MLflow","permalink":"/eason-blog/blog/tags/mlflow","description":"MLflow related posts"},{"inline":false,"label":"NLP","permalink":"/eason-blog/blog/tags/nlp","description":"Natural Language Processing (NLP) related posts"}],"readingTime":17.56,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"fasttext","title":"\u4f7f\u7528MLflow\u548cRay\u8bad\u7ec3fastText","authors":"eason","tags":["ml","mlflow","nlp"]},"unlisted":false,"prevItem":{"title":"\u57fa\u4e8eDocker\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u73af\u5883","permalink":"/eason-blog/blog/ml-env-setup"},"nextItem":{"title":"MLflow\u4fdd\u5b58\u4e0e\u4f7f\u7528\u6a21\u578b","permalink":"/eason-blog/blog/mlflow-log-model"}},"content":"fastText\u662fFacebook\u7814\u53d1\u7684\u4e00\u6b3e\u9488\u5bf9NLP\u9886\u57df\u7684\u89e3\u51b3\u65b9\u6848\u3002\\n\\n\u5176\u4e3b\u8981\u63d0\u4f9b\u4e86\u6587\u672c\u5206\u7c7b\u548c\u8bcd\u5411\u91cf\u5b66\u4e60\u4e24\u5927\u529f\u80fd\u3002\\n\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u6574\u53e5\u8bdd\u7684\u8bcd\u5411\u91cf\u53e0\u52a0\u5e73\u5747\u4f5c\u4e3a\u6587\u672c\u8868\u793a\uff0c\\n\u5e76\u4f7f\u7528softmax\u5206\u7c7b\u5668\u8fdb\u884c\u5206\u7c7b\u3002\\n\\n\u6211\u4eec\u901a\u8fc7\u672c\u6587\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528MLflow\u4ee5\u53caRay\u6765\u8bad\u7ec3\u6211\u4eec\u7684fastText\u6a21\u578b\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## fastText\u4ecb\u7ecd\\n\\nfastText\u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u6548\u7684\u6587\u672c\u5206\u7c7b\u548c\u8bcd\u5411\u91cf\u8868\u793a\u5de5\u5177\uff0cfastText\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\\n\\n1. **\u8bad\u7ec3\u901f\u5ea6\u5feb**\uff1a\u80fd\u591f\u5728\u666e\u901a\u591a\u6838CPU\u4e0a\u51e0\u79d2\u5185\u5904\u7406\u6570\u5341\u4ebf\u4e2a\u8bcd\uff0c\u8bad\u7ec3\u6570\u767e\u4e07\u4e2a\u6587\u672c\u5206\u7c7b\u5668\\n2. **\u6548\u679c\u4f18\u5f02**\uff1a\u5728\u6587\u672c\u5206\u7c7b\u4efb\u52a1\u4e2d\u53d6\u5f97\u4e0e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u76f8\u5f53\u7684\u7cbe\u5ea6\\n3. **\u8d44\u6e90\u5360\u7528\u5c11**\uff1a\u76f8\u6bd4\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff0cfastText\u5bf9\u786c\u4ef6\u8981\u6c42\u4f4e\uff0c\u4e14\u6a21\u578b\u6587\u4ef6\u5c0f\\n4. **\u591a\u8bed\u8a00\u652f\u6301**\uff1a\u652f\u6301294\u79cd\u8bed\u8a00\u7684\u8bcd\u5411\u91cf\u8bad\u7ec3\\n\\n## \u8bad\u7ec3\u76ee\u6807\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4f1a\u9488\u5bf9[\u6dd8\u5b9d\u5ba2\u670d\u5bf9\u8bdd\u6570\u636e](https://github.com/cooelf/DeepUtteranceAggregation/)\\n\u8fd9\u4e2a\u6570\u636e\u96c6\u8fdb\u884c\u5904\u7406\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u8bad\u7ec3\u4e00\u4e2a\u5206\u7c7b\u5668\uff0c\\n\u6765\u5bf9\u4efb\u610f\u5bf9\u8bdd\u6587\u672c\u533a\u5206\u662f\u5ba2\u6237\u8fd8\u662f\u5ba2\u670d\u7684\u6d88\u606f\u3002\\n\\n## \u6570\u636e\u51c6\u5907\\n\\n### \u6570\u636e\u6587\u4ef6\u683c\u5f0f\\n\\n\u6211\u4eec\u901a\u8fc7\u4e0a\u9762\u7684\u7f51\u5740\u4e0b\u8f7d\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u67093\u4e2a\u6570\u636e\u6587\u4ef6\uff0c\u5206\u522b\u662f `train.txt`\u3001 `dev.txt`\u4ee5\u53ca`test.txt`\u3002\\n\\n\u6253\u5f00\u4efb\u610f\u7684\u6587\u4ef6\uff0c\u5176\u5185\u90e8\u6570\u636e\u5982\u4e0b\uff1a\\n\\n```plaintext\\n1 \u5728 \u5417 \u60a8\u597d \u73b0\u5728 \u62cd \u51e0\u5929 \u80fd \u5230 \u8fbd\u5b81 \u8fd9\u4e2a \u4e0d \u4e00\u5b9a \u54e6 \u5927\u6982 \u51e0\u5929 \u4e0d \u77e5\u9053 \u4e48 \u4e00\u822c \u60c5\u51b5 \u4e0b 3 \u5230 5 \u5929 \u5de6\u53f3\\n0 \u5728 \u5417 \u60a8\u597d \u73b0\u5728 \u62cd \u51e0\u5929 \u80fd \u5230 \u8fbd\u5b81 \u8fd9\u4e2a \u4e0d \u4e00\u5b9a \u54e6 \u5927\u6982 \u51e0\u5929 \u4e0d \u77e5\u9053 \u4e48 \u4eb2 \u4e0d\u4f1a \u7684 \u5462 \u60a8 \u653e\u5fc3\\n```\\n\\n\u6bcf\u4e00\u884c\u8868\u793a\u4e3a\uff1a\\n\\n- `1`\u6216`0`\uff1a\u6b63\u786e\u7684\u5bf9\u8bdd\u6d41\u7a0b\u4ee5\u53ca\u9519\u8bef\u7684\u5bf9\u8bdd\u6d41\u7a0b\u3002\\n- \u5faa\u73af\uff08\u7528`\\\\t`\u6765\u9694\u5f00\uff09\uff1a\\n  - \u5ba2\u6237\u95ee\u9898\\n  - \u5ba2\u670d\u56de\u7b54\\n\\n\u6bd4\u5982\u4e0a\u9762\u7684\u6570\u636e\u6837\u672c\u7684\u7b2c\u4e00\u884c\uff1a\\n\\n```\\n1 --\x3e \u6b63\u786e\u7684\u5bf9\u8bdd\\n\u5728 \u5417 --\x3e \u5ba2\u6237\u95ee\u9898\\n\u60a8\u597d --\x3e \u5ba2\u670d\u56de\u7b54\\n\u73b0\u5728 \u62cd \u51e0\u5929 \u80fd \u5230 \u8fbd\u5b81 \u8fd9\u4e2a \u4e0d \u4e00\u5b9a \u54e6 \u5927\u6982 \u51e0\u5929 \u4e0d \u77e5\u9053 \u4e48 --\x3e \u5ba2\u6237\u95ee\u9898\\n\u4e00\u822c \u60c5\u51b5 \u4e0b 3 \u5230 5 \u5929 \u5de6\u53f3 --\x3e \u5ba2\u670d\u56de\u7b54\\n```\\n\\n### fastText\u8981\u6c42\u7684\u6570\u636e\u683c\u5f0f\\n\\nfastText\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5176\u8f93\u5165\u4e3a\u6587\u672c\u6587\u4ef6\uff0c\u5176\u6bcf\u4e00\u884c\u7684\u6570\u636e\u683c\u5f0f\u4e3a\uff1a\\n\\n```\\n\u5206\u7c7b1 \u5206\u7c7b2 \u5206\u7c7b... \u6587\u672c\u884c\\n```\\n\\n\u5373\uff0c\u6bcf\u4e00\u884c\u53ef\u4ee5\u5173\u8054\u591a\u4e2a\u5206\u7c7b\uff0c\u7136\u540e\u5206\u7c7b\u4fe1\u606f\u4ee5\u53ca\u6587\u672c\u884c\u4fe1\u606f\u4ee5\u7a7a\u683c\u9694\u5f00\u3002\\n\\n\u5176\u5206\u7c7b\u8868\u793a\u6709\u72ec\u7279\u7684\u8981\u6c42\uff0c\u6bd4\u5982\u6211\u4eec\u5e0c\u671b\u6784\u5efa\u4e24\u4e2a\u5206\u7c7b\uff1a\\n\\n- `seller`\uff1a\u5ba2\u670d\\n- `customer`\uff1a\u5ba2\u6237\\n\\n\u90a3\u4e48\u5176fastText\u8868\u793a\u4e3a\uff1a `__label__customer`\u548c`__label__seller`\u3002\\n\\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e0a\u8ff0\u7684\u539f\u59cb\u6570\u636e\u6587\u4ef6\uff0c\u6bcf\u884c\u8fdb\u884c\u89e3\u6790\uff0c\u5e76\u6309\u7167\u5b58\u50a8\u5982\u4e0b\u7684\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u5982\uff1a\\n\\n```\\n__label__customer \u60a8\u597d\u54b1\u4eec\u8fd9\u8fb9\u5982\u679c\u80fd\u63d0\u5347\u60a8\u7684\u9500\u91cf\u5229\u6da6\u60a8\u4f1a\u8003\u8651\u8ddf\u6211\u4eec\u5408\u4f5c\u5417\\n__label__customer \u4eb2\u4f60\u5bb6\u4ec0\u4e48\u65f6\u5019\u8fd8\u6709\u6d3b\u52a8\u554a\\n__label__customer \u6211\u7684\u8ba2\u5355\u600e\u4e48\u4e24\u5929\u4e86\u6ca1\u4ec0\u4e48\u53d8\u5316\u554a\u5728\u4e48\\n__label__customer \u597d\u9ebb\u70e6\u4f60\u6539\u4e0b\u8c22\u8c22\\n__label__customer \u660e\u5929\u53ef\u4ee5\u53d1\u8d27\\n__label__seller \u6709\u7684\u54e6\u6ee168\u900195g\u732a\u8089\u812f\u4e00\u888b\\n__label__customer \u8fd9\u4e2a\u4e70\u4e24\u4e2a\u6709\u4f18\u60e0\u5417\\n__label__customer \u4eb2\u4eb2\u5df2\u4e0b\u5355\u4e70\u8fd9\u4e48\u591a\u8bf7\u638c\u67dc\u7684\u591a\u9001\u70b9\u5c0f\u793c\u7269\u554a\\n__label__customer \u55ef\u55ef\u4e86\u89e3\u4e86\u54e6\\n__label__customer \u6211\u4e7010\u4e2a\u4ed8\u6b3e\u7684\u65f6\u5019\u600e\u4e48\u4e0d\u6253\u6298\u5462\\n__label__seller \u60a8\u8fd9\u8fb9\u63d0\u4ea4\u8ba2\u5355\u770b\u770b\u54e6\u7cfb\u7edf\u81ea\u52a8\u6539\u4ef7\u7684\u548c\u8292\u679c\u5e72\u4e00\u6837\u7684\\n__label__seller \u4e0d\u597d\u610f\u601d\u4eb2\u53ef\u80fd\u5feb\u9012\u9014\u4e2d\u6324\u538b\u9020\u6210\u7684\u8fd9\u8fb9\u9000\u4eb22\u5143\u5dee\u4ef7\u4eb2\u770b\u53ef\u4ee5\u5417\\n__label__customer \u4eb2\u6709\u539f\u5473\u74dc\u5b50\u4e48\\n```\\n\\n### \u5904\u7406\u4ee3\u7801\\n\\n\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e0b\u9762\u7684\u4e24\u4e2a\u51fd\u6570\uff0c\u6765\u8bfb\u53d6\u539f\u59cb\u7684\u6570\u636e\u6587\u4ef6\uff0c\u7136\u540e\u9010\u884c\u6309\u7167\u4e0a\u9762\u7684\u683c\u5f0f\uff0c\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u4e86\u5ba2\u6237\u548c\u5ba2\u670d\u7684\u6570\u636e\u6587\u4ef6\u3002\\n\u5e76\u6309\u7167fastText\u7684\u683c\u5f0f\uff0c\u4fdd\u5b58\u6210\u8bad\u7ec3\u6216\u8005\u9a8c\u8bc1\u6587\u4ef6\u3002\\n\\n```python\\ndef load_data(path):\\n    with open(path, \'r\') as f:\\n        data = f.readlines()\\n\\n    customer_utterances = []\\n    seller_utterances = []\\n\\n    for idx, line in tqdm(enumerate(data)):\\n        utterances = line.strip().split(\'\\\\t\')\\n        utterances = [re.sub(r\'[\\\\s\\\\n\\\\t]\', \'\', utterance) for utterance in utterances]\\n\\n        if utterances[0] == \'1\':\\n            customer_utterances += utterances[1::2]\\n            seller_utterances += utterances[2::2]\\n\\n    # Remove utterances only contain digits. If it contains digits and other characters, keep it.\\n    customer_utterances = [utterance for utterance in customer_utterances if not re.match(r\'^[0-9]+$\', utterance)]\\n    seller_utterances = [utterance for utterance in seller_utterances if not re.match(r\'^[0-9]+$\', utterance)]\\n\\n    # Only keep utterances with more than 5 characters\\n    customer_utterances = [utterance for utterance in customer_utterances if len(utterance) > 5]\\n    seller_utterances = [utterance for utterance in seller_utterances if len(utterance) > 5]\\n\\n    # If the utterance are the same in both customer and seller, remove duplicates using sets\\n    customer_set = set(customer_utterances)\\n    seller_set = set(seller_utterances)\\n    \\n    # Remove duplicates that appear in both sets\\n    unique_customer = list(customer_set - seller_set)\\n    unique_seller = list(seller_set - customer_set)\\n    \\n    return unique_customer, unique_seller\\n\\ndef generate_fasttext_data(customer_utterances, seller_utterances, output_path):\\n    \\"\\"\\"Generate FastText training data with labels.\\"\\"\\"\\n    with open(output_path, \'w\', encoding=\'utf-8\') as f:\\n        # Write customer utterances\\n        for utterance in customer_utterances:\\n            f.write(f\\"__label__customer {utterance}\\\\n\\")\\n        \\n        # Write seller utterances\\n        for utterance in seller_utterances:\\n            f.write(f\\"__label__seller {utterance}\\\\n\\")\\n    \\n    print(f\\"FastText training data saved to {output_path}\\")\\n    print(f\\"Total samples: {len(customer_utterances) + len(seller_utterances)}\\")\\n    print(f\\"Customer samples: {len(customer_utterances)}\\")\\n    print(f\\"Seller samples: {len(seller_utterances)}\\")\\n```\\n\\n\u6587\u4ef6\u5904\u7406\u540e\uff0c\u5171\u6709\u8bad\u7ec3\u6570\u636e238,275\u6761\uff0c\u5176\u4e2d\u5ba2\u6237\u5bf9\u8bdd138,429\u6761\uff0c\u5ba2\u670d\u5bf9\u8bdd99,846\u6761\u3002\\n\\n## \u8bad\u7ec3\\n\\n### fastText\u8bad\u7ec3\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7`fasttext.train_supervised()`\u51fd\u6570\u6765\u8bad\u7ec3\u6211\u4eec\u7684\u6a21\u578b\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u5982\u4e0b\u7684\u5185\u5bb9\u8fdb\u884c\u8bad\u7ec3\uff1a\\n\\n```python\\nmodel = fasttext.train_supervised(\\n    input=input_path, \\n    epoch=100, \\n    lr=0.1, \\n    wordNgrams=2, \\n    verbose=2\\n)\\nmodel.save_model(output_path)\\n```\\n\\n\u5176\u4e2d`input_path`\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u6574\u7406\u597d\u7684\u6570\u636e\u6587\u4ef6\u3002\u5176\u4ed6\u7684\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7Ray Tune\u6765\u5e2e\u6211\u4eec\u8fdb\u884c\u5bfb\u627e\u3002\\n\\n### Ray Tune\u5bfb\u627e\u53c2\u6570\\n\\n\u4e3a\u4e86\u4f7f\u7528Ray Tune\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u7684\u6b65\u9aa4\uff0c\u5176\u63a5\u6536\u8bad\u7ec3\u7684\u8d85\u53c2\u6570\u914d\u7f6e\uff0c\u901a\u8fc7\u5236\u5b9a\u8bad\u7ec3\u6587\u4ef6\uff0c\u4ee5\u53ca\u6d4b\u8bd5\u6587\u4ef6\u3002\\n\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```python\\ndef get_file_size_mb(file_path):\\n    \\"\\"\\"\\n    Get file size in megabytes.\\n    \\n    Args:\\n        file_path (str): Path to the file\\n        \\n    Returns:\\n        float: File size in MB\\n    \\"\\"\\"\\n    size_bytes = os.path.getsize(file_path)\\n    size_mb = size_bytes / (1024 * 1024)\\n    return round(size_mb, 2)\\n\\ndef train_and_evaluate_model(config, input_path, test_path):\\n    mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\n    mlflow.set_experiment(\\"fasttext-demo-v3\\")\\n\\n    context = ray.train.get_context()\\n    trial_id = context.get_trial_id()\\n\\n    with mlflow.start_run(run_name=f\'trial_{trial_id}\') as run:\\n        model_path = f\'model_trail_{trial_id}.bin\'\\n\\n        training_df = convert_file_into_dataframe(input_path=input_path)\\n        dataset = mlflow.data.from_pandas(\\n            training_df, name=\'traing data\', targets=\'label\'\\n        )\\n        mlflow.log_input(dataset=dataset, context=\'training\')\\n\\n        mlflow.log_params(config)\\n\\n        # Use the dictionary\'s attributes in the function call\\n        model = fasttext.train_supervised(**config)\\n\\n        model.save_model(model_path)\\n\\n        model_size_mb = get_file_size_mb(model_path)\\n\\n        num_of_samples, precision, recall = model.test(test_path)\\n        f1_score = 2 * precision * recall / (precision + recall)\\n\\n        mlflow.log_metrics({\\n            \\"f1_score\\": f1_score,\\n            \\"precision\\": precision,\\n            \\"recall\\": recall,\\n            \\"model_size\\": model.get_output_matrix().size,\\n            \\"model_size_mb\\": model_size_mb,\\n        })\\n\\n        tune.report({\\n            \\"f1_score\\": f1_score,\\n            \\"precision\\": precision,\\n            \\"recall\\": recall,\\n            \\"model_size\\": model.get_output_matrix().size,\\n            \\"model_size_mb\\": model_size_mb,\\n            \\"model_path\\": model_path,\\n        })\\n```\\n\\n\u51fd\u6570`train_and_evaluate_model`\u662f\u6211\u4eec\u7528\u6765\u8bad\u7ec3\u548c\u8bc4\u4f30fastText\u6a21\u578b\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5b83\u7ed3\u5408\u4e86MLflow\u548cRay Tune\u7684\u529f\u80fd\u3002\u8be6\u7ec6\u89e3\u6790\u5982\u4e0b\uff1a\\n\\n1. **\u51fd\u6570\u53c2\u6570**\uff1a\\n   - `config`\uff1a\u5305\u542b\u6a21\u578b\u8bad\u7ec3\u53c2\u6570\u7684\u5b57\u5178\\n   - `input_path`\uff1a\u8bad\u7ec3\u6570\u636e\u6587\u4ef6\u7684\u8def\u5f84\\n   - `test_path`\uff1a\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u7684\u8def\u5f84\\n\\n2. **MLflow\u8bbe\u7f6e**\uff1a\\n\\n   ```python\\n   mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\n   mlflow.set_experiment(\\"fasttext-demo-v3\\")\\n   ```\\n\\n   \u8bbe\u7f6eMLflow\u7684\u8ffd\u8e2a\u670d\u52a1\u5668\u5730\u5740\u5e76\u521b\u5efa\u540d\u4e3a`fasttext-demo-v3`\u7684\u5b9e\u9a8c\u3002\\n\\n3. **Ray Tune\u4e0a\u4e0b\u6587**\uff1a\\n\\n   ```python\\n   context = ray.train.get_context()\\n   trial_id = context.get_trial_id()\\n   ```\\n\\n   \u83b7\u53d6Ray Tune\u7684\u8bad\u7ec3\u4e0a\u4e0b\u6587\u548c\u8bd5\u9a8cID\uff0c\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u8bad\u7ec3\u8bd5\u9a8c\u3002\u5176\u683c\u5f0f\u4e3a8\u4f4d16\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a`01b8b86e`\u3002\\n\\n4. **\u6570\u636e\u51c6\u5907**\uff1a\\n\\n   ```python\\n   training_df = convert_file_into_dataframe(input_path=input_path)\\n   dataset = mlflow.data.from_pandas(training_df, name=\'traing data\', targets=\'label\')\\n   mlflow.log_input(dataset=dataset, context=\'training\')\\n   ```\\n\\n   \u5c06\u8bad\u7ec3\u6570\u636e\u8f6c\u6362\u4e3aDataFrame\uff0c\u5e76\u521b\u5efaMLflow\u6570\u636e\u96c6\u5bf9\u8c61\u3002\\n   \u6b64\u6b65\u9aa4\u975e\u5fc5\u987b\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u6f14\u793a\u5982\u4f55\u4f7f\u7528MLflow\u7684`mlflow.log_input`\u6765\u4fdd\u5b58\u8bad\u7ec3\u7684\u6570\u636e\u3002\\n\\n5. **\u6a21\u578b\u8bad\u7ec3**\uff1a\\n\\n   ```python\\n   model = fasttext.train_supervised(**config)\\n   model.save_model(model_path)\\n   ```\\n\\n   \u4f7f\u7528\u914d\u7f6e\u53c2\u6570\u8bad\u7ec3fastText\u6a21\u578b\uff0c\u5e76\u4fdd\u5b58\u6a21\u578b\u6587\u4ef6\u3002\\n\\n6. **\u6a21\u578b\u8bc4\u4f30**\uff1a\\n\\n   ```python\\n   model_size_mb = get_file_size_mb(model_path)\\n\\n   num_of_samples, precision, recall = model.test(test_path)\\n   f1_score = 2 * precision * recall / (precision + recall)\\n   ```\\n\\n   \u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\uff0c\u8ba1\u7b97\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u5206\u6570\u3002\\n   \u540c\u65f6\u6211\u4eec\u4e5f\u901a\u8fc7\u51fd\u6570`get_file_size_mb`\u6765\u8ba1\u7b97\u751f\u6210\u6a21\u578b\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\\n   \u4e3b\u8981\u662f\u8003\u8651\u65e2\u6ee1\u8db3\u6a21\u578b\u7684\u51c6\u786e\u7387\u7b49\u8981\u6c42\uff0c\u540c\u65f6\uff0c\u4e5f\u8981\u6bd4\u8f83\u5c0f\u7684\u8ba1\u7b97\u6027\u80fd\u6d88\u8017\u3002\\n\\n7. **\u6307\u6807\u8bb0\u5f55**\uff1a\\n   - \u4f7f\u7528MLflow\u8bb0\u5f55\u53c2\u6570\u548c\u6307\u6807\uff1a\\n\\n     ```python\\n     mlflow.log_params(config)\\n     mlflow.log_metrics({...})\\n     ```\\n\\n   - \u5411Ray Tune\u62a5\u544a\u7ed3\u679c\uff1a\\n\\n     ```python\\n     tune.report({...})\\n     ```\\n\\n   \u8bb0\u5f55\u8bad\u7ec3\u53c2\u6570\u3001\u8bc4\u4f30\u6307\u6807\u548c\u6a21\u578b\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\\n\\n\u51fd\u6570`train_and_evaluate_model`\u901a\u8fc7MLflow\u8ffd\u8e2a\u6bcf\u6b21\u8bad\u7ec3\u7684\u8fc7\u7a0b\u548c\u7ed3\u679c\uff0c\u540c\u65f6\u901a\u8fc7Ray Tune\u8fdb\u884c\u8d85\u53c2\u6570\u4f18\u5316\u3002\u6bcf\u6b21\u8bad\u7ec3\u90fd\u4f1a\uff1a\\n\\n- \u8bb0\u5f55\u8bad\u7ec3\u53c2\u6570\\n- \u4fdd\u5b58\u8bad\u7ec3\u6570\u636e\u4fe1\u606f\\n- \u8bad\u7ec3\u6a21\u578b\\n- \u8bc4\u4f30\u6a21\u578b\u6027\u80fd\\n- \u8bb0\u5f55\u5404\u79cd\u6307\u6807\\n\\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7MLflow\u7684UI\u754c\u9762\u67e5\u770b\u6bcf\u6b21\u8bad\u7ec3\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u901a\u8fc7Ray Tune\u627e\u5230\u6700\u4f18\u7684\u6a21\u578b\u53c2\u6570\u914d\u7f6e\u3002\\n\\n:::tip \u8bad\u7ec3\u6587\u4ef6\u8def\u5f84\\n\\n\u6211\u4eec\u5728\u4f7f\u7528Ray Tune\u8fdb\u884c\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ce8\u610fRay\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u8bad\u7ec3\u5f15\u64ce\uff0c\\n\u56e0\u6b64\u5b83\u6709\u53ef\u80fd\u4f1a\u5728\u4e0d\u540c\u7684\u4e3b\u673a\u4e0a\u8fd0\u884c\u8bad\u7ec3\u4ee3\u7801\u3002\\n\\n\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8bad\u7ec3\u7684\u6570\u636e\uff0c\u5728\u4e0d\u540c\u7684\u4e3b\u673a\u4e0a\u90fd\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002\\n\\n\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u672c\u5730\u5355\u673a\u7684Ray\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e86\u7edd\u5bf9\u8def\u5f84\u6765\u63d0\u4f9b\u8bad\u7ec3\u6587\u4ef6\uff0c\u5982\uff1a\\n`/ray-tune/data/fasttext_train.txt`\u3002\\n\\n:::\\n\\n### \u5b9a\u4e49\u53c2\u6570\u5bfb\u627e\u8303\u56f4\\n\\n\u6211\u4eec\u6709\u4e86\u4e0a\u9762\u7684\u8bad\u7ec3\u51fd\u6570\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49Ray\u7684\u53c2\u6570\u8303\u56f4\uff0c\u4ee5\u53ca\u4f18\u5316\u7b56\u7565\u6765\u8bad\u7ec3\u6211\u4eec\u7684\u6a21\u578b\u4e86\u3002\\n\\n```python\\ndef tune_fasttext_parameters(input_path, test_path, num_samples=50):\\n    ray.init()\\n\\n    config = {\\n        \\"input\\": input_path,\\n        \\"epoch\\": tune.randint(50, 300),\\n        \\"lr\\": tune.loguniform(1e-5, 1e-3),  # Reduced max learning rate\\n        \\"wordNgrams\\": tune.randint(1, 4),\\n        \\"dim\\": tune.randint(10, 50),\\n        \\"ws\\": tune.randint(3, 7),\\n        \\"minCount\\": tune.randint(2, 10),\\n        \\"minn\\": 1,\\n        \\"maxn\\": 3,\\n        \\"bucket\\": tune.choice([50000, 100000, 200000]),\\n        \\"thread\\": 4,\\n        \\"loss\\": \\"softmax\\",\\n        \\"verbose\\": 2,\\n    }\\n\\n    search_algo = OptunaSearch(\\n        metric=[\\"f1_score\\", \\"model_size_mb\\"],\\n        mode=[\\"max\\", \\"min\\"],\\n    )\\n\\n    analysis = tune.run(\\n        lambda trail_config: train_and_evaluate_model(trail_config, input_path, test_path),\\n        config=config,\\n        num_samples=num_samples,\\n        search_alg=search_algo,\\n        resources_per_trial={\\"cpu\\": 4}\\n    )\\n\\n    # Get the best trial based on both metrics\\n    best_trial = analysis.get_best_trial(\\n        metric=\\"f1_score\\",  # Primary metric\\n        mode=\\"max\\",\\n        scope=\\"last\\"  # Consider only the last reported results\\n    )\\n    print(f\\"Best trial: {best_trial}\\")\\n\\n    return best_trial\\n```\\n\\n\u51fd\u6570`tune_fasttext_parameters`\u662f\u7528\u6765\u914d\u7f6e\u548c\u6267\u884cRay Tune\u8d85\u53c2\u6570\u4f18\u5316\u7684\u4e3b\u8981\u51fd\u6570\u3002\u5176\u8be6\u7ec6\u8bbe\u7f6e\u5982\u4e0b\uff1a\\n\\n1. **\u51fd\u6570\u53c2\u6570**\uff1a\\n   - `input_path`\uff1a\u8bad\u7ec3\u6570\u636e\u6587\u4ef6\u7684\u8def\u5f84\\n   - `test_path`\uff1a\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u7684\u8def\u5f84\\n   - `num_samples`\uff1a\u8d85\u53c2\u6570\u641c\u7d22\u7684\u8bd5\u9a8c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a50\u6b21\\n\\n2. **Ray\u521d\u59cb\u5316**\uff1a\\n\\n   ```python\\n   ray.init()\\n   ```\\n\\n   \u521d\u59cb\u5316Ray\u8fd0\u884c\u65f6\u73af\u5883\uff0c\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u505a\u51c6\u5907\u3002\\n\\n3. **\u8d85\u53c2\u6570\u914d\u7f6e\u7a7a\u95f4**\uff1a\\n\\n   ```python\\n   config = {\\n       \\"input\\": input_path,\\n       \\"epoch\\": tune.randint(50, 300),\\n       \\"lr\\": tune.loguniform(1e-5, 1e-3),\\n       \\"wordNgrams\\": tune.randint(1, 4),\\n       ...\\n   }\\n   ```\\n\\n   \u5b9a\u4e49\u4e86fastText\u6a21\u578b\u7684\u5404\u4e2a\u8d85\u53c2\u6570\u7684\u641c\u7d22\u7a7a\u95f4\uff1a\\n\\n   - `epoch`\uff1a\u8bad\u7ec3\u8f6e\u6570\uff0c\u572850\u5230300\u4e4b\u95f4\u968f\u673a\u9009\u62e9\u3002\\n   - `lr`\uff1a\u5b66\u4e60\u7387\uff0c\u57281e-5\u52301e-3\u4e4b\u95f4\u6309\u5bf9\u6570\u5747\u5300\u5206\u5e03\u9009\u62e9\u3002\\n   - `wordNgrams`\uff1a\u8bcd\u7ec4\u957f\u5ea6\uff0c\u57281\u52304\u4e4b\u95f4\u9009\u62e9\u3002\\n   - `dim`\uff1a\u8bcd\u5411\u91cf\u7ef4\u5ea6\uff0c\u572810\u523050\u4e4b\u95f4\u9009\u62e9\u3002\\n   - `ws`\uff1a\u4e0a\u4e0b\u6587\u7a97\u53e3\u5927\u5c0f\uff0c\u57283\u52307\u4e4b\u95f4\u9009\u62e9\u3002\\n   - `minCount`\uff1a\u6700\u5c0f\u8bcd\u9891\uff0c\u57282\u523010\u4e4b\u95f4\u9009\u62e9\u3002\\n   - `bucket`\uff1a\u54c8\u5e0c\u6876\u6570\u91cf\uff0c\u5728[50000, 100000, 200000]\u4e2d\u9009\u62e9\uff0c\u5176\u6570\u503c\u8f83\u5c0f\u53ef\u51cf\u5c11\u6a21\u578b\u5927\u5c0f\uff0c\u4f46\u662f\u5bb9\u6613\u4ea7\u751f\u51b2\u7a81\u5e76\u635f\u5931\u7279\u5f81\u4fe1\u606f\u3002\\n\\n4. **\u641c\u7d22\u7b97\u6cd5\u914d\u7f6e**\uff1a\\n\\n   ```python\\n   search_algo = OptunaSearch(\\n       metric=[\\"f1_score\\", \\"model_size_mb\\"],\\n       mode=[\\"max\\", \\"min\\"],\\n   )\\n   ```\\n\\n   \u4f7f\u7528Optuna\u4f5c\u4e3a\u641c\u7d22\u7b97\u6cd5\uff0c\u4f18\u5316\u4e24\u4e2a\u76ee\u6807\uff1a\\n   - \u6700\u5927\u5316F1\u5206\u6570\\n   - \u6700\u5c0f\u5316\u6a21\u578b\u5927\u5c0f\\n\\n5. **\u6267\u884c\u8d85\u53c2\u6570\u641c\u7d22**\uff1a\\n\\n   ```python\\n   analysis = tune.run(\\n       lambda trail_config: train_and_evaluate_model(trail_config, input_path, test_path),\\n       config=config,\\n       num_samples=num_samples,\\n       search_alg=search_algo,\\n       resources_per_trial={\\"cpu\\": 4}\\n   )\\n   ```\\n\\n   \u542f\u52a8\u8d85\u53c2\u6570\u641c\u7d22\uff1a\\n   - \u6bcf\u6b21\u8bd5\u9a8c\u90fd\u4f1a\u8c03\u7528`train_and_evaluate_model`\u51fd\u6570\\n   - \u4f7f\u7528\u914d\u7f6e\u7684\u53c2\u6570\u7a7a\u95f4\u8fdb\u884c\u641c\u7d22\\n   - \u6267\u884c\u6307\u5b9a\u6b21\u6570\u7684\u8bd5\u9a8c\\n   - \u6bcf\u4e2a\u8bd5\u9a8c\u5206\u914d4\u4e2aCPU\u6838\u5fc3\\n\\n6. **\u83b7\u53d6\u6700\u4f73\u7ed3\u679c**\uff1a\\n\\n   ```python\\n   best_trial = analysis.get_best_trial(\\n       metric=\\"f1_score\\",\\n       mode=\\"max\\",\\n       scope=\\"last\\"\\n   )\\n   ```\\n\\n   \u4ece\u6240\u6709\u8bd5\u9a8c\u4e2d\u9009\u62e9\u6700\u4f73\u7ed3\u679c\uff1a\\n   - \u4e3b\u8981\u57fa\u4e8eF1\u5206\u6570\u8fdb\u884c\u9009\u62e9\\n   - \u9009\u62e9F1\u5206\u6570\u6700\u9ad8\u7684\u8bd5\u9a8c\\n   - \u53ea\u8003\u8651\u6bcf\u4e2a\u8bd5\u9a8c\u7684\u6700\u540e\u4e00\u6b21\u7ed3\u679c\\n\\n\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7Ray Tune\u7684\u8d85\u53c2\u6570\u4f18\u5316\u529f\u80fd\uff0c\u81ea\u52a8\u641c\u7d22\u6700\u4f73\u7684fastText\u6a21\u578b\u53c2\u6570\u914d\u7f6e\u3002\u5b83\u4e0d\u4ec5\u8003\u8651\u4e86\u6a21\u578b\u7684\u6027\u80fd\uff08F1\u5206\u6570\uff09\uff0c\\n\u8fd8\u8003\u8651\u4e86\u6a21\u578b\u7684\u5927\u5c0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u6027\u80fd\u548c\u8d44\u6e90\u6d88\u8017\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u826f\u597d\u7684\u5e73\u8861\u70b9\u3002\\n\\n:::tip \u591a\u76ee\u6807\u4f18\u5316\\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86Optuna\u4f5c\u4e3a\u641c\u7d22\u7b97\u6cd5\uff0c\u5e76\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u4f18\u5316\u76ee\u6807\uff1aF1\u5206\u6570\u548c\u6a21\u578b\u5927\u5c0f\u3002\\n\u8fd9\u79cd\u591a\u76ee\u6807\u4f18\u5316\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u6a21\u578b\u6027\u80fd\u548c\u8d44\u6e90\u6d88\u8017\u4e4b\u95f4\u627e\u5230\u66f4\u597d\u7684\u5e73\u8861\u3002\\n\\n\u4f46\u662f\u5728\u6700\u7ec8\u9009\u62e9\u6700\u4f73\u8bd5\u9a8c\u65f6\uff0c\u6211\u4eec\u4ecd\u7136\u4e3b\u8981\u57fa\u4e8eF1\u5206\u6570\u8fdb\u884c\u9009\u62e9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\\n\u6211\u4eec\u901a\u5e38\u4f1a\u4f18\u5148\u8003\u8651\u6a21\u578b\u7684\u6027\u80fd\uff0c\u53ea\u8981\u6a21\u578b\u5927\u5c0f\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u5373\u53ef\u3002\\n:::\\n\\n## \u53ef\u9009\u6b65\u9aa4\\n\\n### \u5bf9\u8bad\u7ec3\u5f02\u5e38\u8fdb\u884c\u5904\u7406\\n\\n\u7531\u4e8efastText\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u62a5\u9519\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5f02\u5e38\u8fdb\u884c\u6355\u83b7\uff0c\u7136\u540e\u8fdb\u884c\u9488\u5bf9\u6027\u7684\u5904\u7406\u3002\\n\\n```python\\ndef train_and_evaluate_model(config, input_path, test_path):\\n    # ...\\n        try:\\n            # Use the dictionary\'s attributes in the function call\\n            model = fasttext.train_supervised(**config)\\n\\n            model.save_model(model_path)\\n\\n            model_size_mb = get_file_size_mb(model_path)\\n\\n            num_of_samples, precision, recall = model.test(test_path)\\n            f1_score = 2 * precision * recall / (precision + recall)\\n\\n            mlflow.log_metrics({\\n                \\"f1_score\\": f1_score,\\n                \\"precision\\": precision,\\n                \\"recall\\": recall,\\n                \\"model_size\\": model.get_output_matrix().size,\\n                \\"model_size_mb\\": model_size_mb,\\n            })\\n\\n            tune.report({\\n                \\"f1_score\\": f1_score,\\n                \\"precision\\": precision,\\n                \\"recall\\": recall,\\n                \\"model_size\\": model.get_output_matrix().size,\\n                \\"model_size_mb\\": model_size_mb,\\n                \\"model_path\\": model_path,\\n            })\\n        except Exception as e:\\n            print(f\\"Error: {e}\\")\\n            mlflow.log_param(\'error_message\', str(e))\\n            mlflow.log_metric(\'failed\', 1)\\n\\n            tune.report({\\n                \\"f1_score\\": -1,\\n                \\"precision\\": -1,\\n                \\"recall\\": -1,\\n                \\"model_size\\": -1,\\n                \\"model_size_mb\\": sys.float_info.max,\\n                \\"model_path\\": model_path,\\n            })\\n    # ...\\n```\\n\\n\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86`try...except`\u8bed\u53e5\u6765\u5904\u7406\u5f02\u5e38\uff0c\u5c24\u5176\u662f\u5728\u5f02\u5e38\u540e\uff0c\\n\u6211\u4eec\u4f1a\u8bb0\u5f55\u5f02\u5e38\u7684\u539f\u56e0\uff0c\u540c\u65f6\u5229\u7528`tune.report`\u6765\u544a\u77e5\u4f18\u5316\u5668\uff0c\u8be5\u53c2\u6570\u7ec4\u5408\u53ef\u80fd\u4f1a\u9020\u6210\u5f02\u5e38\u3002\\n\u56e0\u6b64\uff0c\u5e94\u5f53\u5c3d\u91cf\u89c4\u907f\u3002\\n\\n### \u8bb0\u5f55\u6a21\u578b\\n\\n\u5728\u8bad\u7ec3\u5e76\u9a8c\u8bc1\u540e\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u7684\u6a21\u578b\u6587\u4ef6\uff0c\u56e0\u6b64\u901a\u8fc7\u6784\u9020\u652f\u6301`mlflow.pyfunc.log_model`\u7684\u5305\u88c5\u5668\uff0c\\n\u6211\u4eec\u53ef\u4ee5\u5feb\u6377\u7684\u4fdd\u5b58\u5e76\u6ce8\u518c\u6a21\u578b\u6587\u4ef6\u3002\u4f8b\u5982\u6211\u4eec\u6784\u9020\u7684\u5305\u88c5\u5668\uff1a\\n\\n```python\\nclass FastTextWrapper(mlflow.pyfunc.PythonModel):\\n    def load_context(self, context):\\n        self.model = fasttext.load_model(context.artifacts[\\"fasttext_model\\"])\\n    \\n    def predict(self, context, model_input):\\n        predictions = []\\n        for text in model_input[\\"text\\"]:\\n            label, prob = self.model.predict(text)\\n            predictions.append({\\"label\\": label[0], \\"probability\\": prob[0]})\\n        return predictions\\n```\\n\\n\u5728\u6a21\u578b\u8bad\u7ec3\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53ca\u65f6\u6ce8\u518c\u6a21\u578b\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a\\n\\n```python\\n# Log the model as an artifact\\nmlflow.log_artifact(model_path, \\"model\\")\\n\\nmlflow.pyfunc.log_model(\\n    artifact_path=\\"fasttext_model\\",\\n    python_model=FastTextWrapper(),\\n    artifacts={\\n        \\"fasttext_model\\": model_path\\n    },\\n    registered_model_name=\\"fasttext_classifier\\"\\n)\\n```\\n\\n\u8fd9\u6837\uff0c\u5728\u6211\u4eec\u7684MLflow\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u770b\u5230\u67d0\u4e00\u4e2a\u8fd0\u884c\u7ed3\u679c\u6240\u5bf9\u5e94\u7684\u6a21\u578b\u6587\u4ef6\u4fe1\u606f\u4e86\u3002\\n\\n\u800c\u4e14\uff0c\u4e5f\u65b9\u4fbf\u6211\u4eec\u540e\u7eed\u4f7f\u7528\u54cd\u5e94\u7684\u6a21\u578b\u7ed3\u679c\u7528\u4e8e\u9a8c\u8bc1\u7b49\u76ee\u7684\u3002\\n\\n## \u7ed3\u679c\u89e3\u6790\\n\\n\u6211\u4eec\u6253\u5f00MLflow\u7684\u540e\u53f0\uff0c\u901a\u8fc7\u68c0\u7d22\u8fc7\u6ee4\u6ee1\u8db3\uff1a`metrics.model_size_mb < 5`\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u6211\u4eec\u5f97\u523071\u4e2a\u8fd0\u884c\u7ed3\u679c\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Result](./mlflow-result.png)\\n\\n\u6211\u4eec\u6309\u7167`model_size_mb`\u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u627e\u5230\u6700\u5c0f\u6a21\u578b\u5927\u5c0f\u7684\u6587\u4ef6\uff0c\u7136\u540e\u6211\u4eec\u901a\u8fc7\u68c0\u67e5`f1_score`\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u83b7\u5f97\u76f8\u5e94\u7684\u8bad\u7ec3\u53c2\u6570\u3002\\n\\n## \u603b\u7ed3\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528Ray Tune\u4ee5\u53caMLflow\uff0c\u5b9e\u73b0\u4e86\u9488\u5bf9fastText\u7684\u8bad\u7ec3\u3002\\n\\n\u540c\u65f6\u501f\u52a9\u53c2\u6570\u5bfb\u627e\u4f18\u5316\u7b56\u7565\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u7684\u627e\u5230\u8ba9\u6211\u4eec\u6ee1\u610f\u7684\u53c2\u6570\u7a7a\u95f4\u3002"},{"id":"mlflow-log-model","metadata":{"permalink":"/eason-blog/blog/mlflow-log-model","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-08-mlflow-log-model/index.md","source":"@site/blog/2025-02-08-mlflow-log-model/index.md","title":"MLflow\u4fdd\u5b58\u4e0e\u4f7f\u7528\u6a21\u578b","description":"\u5728\u6211\u4eec\u8bad\u7ec3\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u90fd\u4f1a\u4f34\u968f\u7740\u51fa\u6765\u7684\u6a21\u578b\u7684\u5b58\u653e\u95ee\u9898\u3002","date":"2025-02-08T00:00:00.000Z","tags":[{"inline":false,"label":"Machine Learning","permalink":"/eason-blog/blog/tags/machine-learning","description":"Machine Learning related posts"},{"inline":false,"label":"MLflow","permalink":"/eason-blog/blog/tags/mlflow","description":"MLflow related posts"}],"readingTime":10.85,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"mlflow-log-model","title":"MLflow\u4fdd\u5b58\u4e0e\u4f7f\u7528\u6a21\u578b","authors":"eason","tags":["ml","mlflow"]},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528MLflow\u548cRay\u8bad\u7ec3fastText","permalink":"/eason-blog/blog/fasttext"},"nextItem":{"title":"MLflow\u4f7f\u7528PostgresSQL","permalink":"/eason-blog/blog/mlflow-change-db"}},"content":"\u5728\u6211\u4eec\u8bad\u7ec3\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u90fd\u4f1a\u4f34\u968f\u7740\u51fa\u6765\u7684\u6a21\u578b\u7684\u5b58\u653e\u95ee\u9898\u3002\\n\\n\u8f83\u4e3a\u7b80\u5355\u7684\u65b9\u6848\u5c31\u662f\u5c06\u6a21\u578b\u5b58\u653e\u5728\u672c\u5730\u7684\u67d0\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u3002\\n\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5229\u4e8e\u6a21\u578b\u7ed3\u679c\u7684\u5171\u4eab\u3002\\n\\n\u800cMLflow\u63d0\u4f9b\u4e86\u6a21\u578b\u7684\u4fdd\u5b58\u529f\u80fd\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u53ca\u65f6\u7684\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u4e0a\u4f20\u5230MLflow\u4e2d\u3002\\n\u4ee5\u4fbf\u540e\u7eed\u7ee7\u7eed\u6df1\u5316\u5e94\u7528\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u95ee\u9898\\n\\nMLflow\u63d0\u4f9b\u4e86\u591a\u79cd\u7684\u6a21\u578b\u4fdd\u5b58\u7b56\u7565\u3002\\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u9488\u5bf9\u4e0d\u540c\u6846\u67b6\u4ea7\u751f\u7684\u6a21\u578b\uff0cMLflow\u63d0\u4f9b\u4e86\u591a\u79cd\u7684\u65b9\u6cd5\u6765\u4fbf\u6377\u7684\u4e0a\u4f20\u4e0d\u540c\u6846\u67b6\u6240\u4ea7\u751f\u7684\u6a21\u578b\u6587\u4ef6\u3002\\n\\n\u6bd4\u5982\uff0c\u9488\u5bf9[scikit-learn](https://scikit-learn.org/)\uff0c\\nMLflow\u63d0\u4f9b\u4e86`mlflow.sklearn.log_model`\u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u5feb\u901f\u7684\u63d0\u4ea4\u6a21\u578b\uff0c\u5982\u4ee3\u7801\uff1a\\n\\n```python\\n# Log the sklearn model and register\\nmlflow.sklearn.log_model(\\n    sk_model=model,\\n    artifact_path=\\"sklearn-model\\",\\n    signature=signature,\\n    registered_model_name=\\"sk-learn-random-forest-reg-model\\",\\n)\\n```\\n\\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u57fa\u4e8eStable-Baselines3\uff0c\u8fd9\u6837\u7684\u5f3a\u5316\u5b66\u4e60\u6846\u67b6\u6765\u8bf4\uff0cMLflow\u5b98\u65b9\u5e76\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u7684\u6846\u67b6\u652f\u6301\u3002\\n\\n\u4e0d\u8fc7\uff0cMLflow\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u79cd\u66f4\u4e3a\u901a\u7528\u7684\u65b9\u6848\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7`mlflow.pyfunc.log_model`\u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u4e0a\u4f20\u6a21\u578b\u3002\\n\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u6765\u770b\u770b\u5982\u4f55\u4f7f\u7528MLflow\u6765\u8bb0\u5f55Stable-Baselines3\u8bad\u7ec3\u4ea7\u751f\u7684\u6a21\u578b\u6587\u4ef6\u3002\\n\\n## \u4fdd\u5b58\u6a21\u578b\\n\\n\u5728\u6b64\u6587\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7f16\u5199\u7c7b\u6587\u4ef6\u6765\u7ee7\u627f`MLflow.pyfunc.PythonModel`\u8fd9\u6837\u7684\u65b9\u5f0f\uff0c\u6765\u4f7f\u7528\u76f8\u5173\u7684\u80fd\u529b\u3002\\n\\n### \u65b0\u5efa\u5305\u88c5\u7c7b\\n\\n\u9996\u5148\uff0c\u9488\u5bf9\u6211\u4eec\u7684\u7b97\u6cd5\uff0c\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5305\u88c5\u7c7b`MLflowDQNWrapper`\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```python\\nimport numpy as np\\nfrom stable_baselines3 import DQN\\n\\nclass MLflowDQNWrapper(mlflow.pyfunc.PythonModel):\\n    def __init__(self):\\n        self.model = None\\n    \\n    def load_context(self, context):\\n        # Load the model from the saved path\\n        self.model = DQN.load(context.artifacts[\\"model_path\\"])\\n\\n    def predict(self, context, model_input):\\n        # Convert model_input to numpy array if it\'s a pandas DataFrame\\n        if hasattr(model_input, \'to_numpy\'):\\n            model_input = model_input.to_numpy()\\n        action, _states = self.model.predict(model_input, deterministic=True)\\n        return action\\n```\\n\\n\u5728\u4e0a\u9762\u7684\u5b9a\u4e49\u4e2d\uff1a\\n\\n- `load_context()`\uff1a\u6b64\u65b9\u6cd5\u4f1a\u5728\u6a21\u578b\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u56de\u8c03\uff0c\u6b64\u5904\u4f1a\u6784\u9020\u4e00\u4e2aDQN\u7684\u7f51\u7edc\uff0c\u4f7f\u7528\u5b58\u50a8\u7684\u6a21\u578b\u6587\u4ef6\u3002\\n- `predict()`\uff1a\u6b64\u65b9\u6cd5\u4f1a\u5728\u6a21\u578b\u9884\u6d4b\u7684\u65f6\u5019\u88ab\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6b64\u5904\u4f1a\u8c03\u7528\u6a21\u578b\u672c\u8eab\u7684`predict`\u65b9\u6cd5\u6765\u8fdb\u884c\u9884\u6d4b\u3002\\n\\n### \u4e0a\u4f20\u6a21\u578b\u5230MLflow\\n\\n\u5b9a\u4e49\u597d\u6211\u4eec\u7684\u5305\u88c5\u7c7b\u540e\uff0c\u6211\u4eec\u5728\u5355\u4e2a\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c\u4e0a\u4f20\u4fdd\u5b58\u6211\u4eec\u7684\u6a21\u578b\u3002\\n\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```python\\n# Get the best model path\\nbest_model_path = os.path.join(best_model_save_path, \\"best_model.zip\\")\\n\\n# Create and log the wrapped model\\nwrapped_model = MLflowDQNWrapper()\\ninput_example = np.array([[0.0, 0.0, 0.0, 0.0]])\\n\\n# Log the model with MLflow\\nmlflow.pyfunc.log_model(\\n    artifact_path=\\"model\\",\\n    python_model=wrapped_model,\\n    artifacts={\\"model_path\\": best_model_path},\\n    signature=mlflow.models.signature.infer_signature(\\n        model_input=input_example,\\n        model_output=np.array([0])\\n    ),\\n    input_example=input_example,\\n    registered_model_name=\\"cartpole-v1-dqn\\"\\n)\\n```\\n\\n\u6211\u4eec\u4f9d\u6b21\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4e0a\u9762\u7684\u4ee3\u7801\u7684\u5de5\u4f5c\uff1a\\n\\n- `best_model_path`: \u9996\u5148\u83b7\u53d6\u6700\u4f73\u6a21\u578b\u7684\u4fdd\u5b58\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u6307\u5411\u4e86\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u7684\u6700\u4f73\u6a21\u578b\u6587\u4ef6\u3002\\n- `wrapped_model = MLflowDQNWrapper()`: \u521b\u5efa\u6211\u4eec\u4e4b\u524d\u5b9a\u4e49\u7684\u5305\u88c5\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5305\u88c5\u7c7b\u5c06\u5e2e\u52a9MLflow\u7406\u89e3\u5982\u4f55\u52a0\u8f7d\u548c\u4f7f\u7528\u6211\u4eec\u7684DQN\u6a21\u578b\u3002\\n- `input_example`: \u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u8f93\u5165\u6570\u636e\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u5f62\u72b6\u4e3a (1, 4) \u7684numpy\u6570\u7ec4\uff0c\u5bf9\u5e94CartPole\u73af\u5883\u76844\u4e2a\u89c2\u6d4b\u503c\u3002\u8fd9\u4e2a\u793a\u4f8b\u8f93\u5165\u5c06\u5e2e\u52a9MLflow\u7406\u89e3\u6a21\u578b\u7684\u8f93\u5165\u683c\u5f0f\u3002\\n- `mlflow.pyfunc.log_model()`: \u4f7f\u7528MLflow\u7684\u901a\u7528Python\u51fd\u6570\u63a5\u53e3\u4fdd\u5b58\u6a21\u578b\uff0c\u5176\u4e2d\uff1a\\n  - `artifact_path`: \u6307\u5b9a\u6a21\u578b\u5728MLflow\u4e2d\u7684\u5b58\u50a8\u8def\u5f84\\n  - `python_model`: \u6307\u5b9a\u6211\u4eec\u7684\u5305\u88c5\u7c7b\u5b9e\u4f8b\\n  - `artifacts`: \u5b9a\u4e49\u6a21\u578b\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u8fd9\u91cc\u5305\u542b\u4e86\u6a21\u578b\u6587\u4ef6\u7684\u8def\u5f84\\n  - `signature`: \u901a\u8fc7`infer_signature`\u63a8\u65ad\u6a21\u578b\u7684\u8f93\u5165\u8f93\u51fa\u7b7e\u540d\uff0c\u5e2e\u52a9MLflow\u9a8c\u8bc1\u6570\u636e\u683c\u5f0f\\n  - `input_example`: \u63d0\u4f9b\u793a\u4f8b\u8f93\u5165\uff0c\u5e2e\u52a9\u5176\u4ed6\u7528\u6237\u7406\u89e3\u5982\u4f55\u4f7f\u7528\u8be5\u6a21\u578b\\n  - `registered_model_name`: \u5728Model Registry\u4e2d\u6ce8\u518c\u7684\u6a21\u578b\u540d\u79f0\\n\\n\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06Stable-Baselines3\u8bad\u7ec3\u7684DQN\u6a21\u578b\u4fdd\u5b58\u5230MLflow\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u548c\u90e8\u7f72\u3002\\n\\n## \u5728MLflow\u4e2d\u67e5\u770b\u6a21\u578b\\n\\n### \u6a21\u578b\u67e5\u770b\\n\\n\u5f53\u6211\u4eec\u7684\u6a21\u578b\u4e0a\u4f20\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728MLflow\u7684\u540e\u53f0\u770b\u5230\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u6a21\u578b\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u8bb0\u5f55\u3002\\n\\n:::tip \u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u8fd8\u662f\u591a\u4e2a\u6a21\u578b\uff1f\\n\u5bf9\u4e8e\u7c7b\u4f3c\u591a\u8f6e\u7684\u8bad\u7ec3\u6765\u8bf4\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u578b\u540d\u6765\u4fdd\u5b58\u6240\u6709\u7248\u672c\u7684\u6a21\u578b\u3002\\n\\n\u5728\u6211\u4eec\u5411\u540c\u4e00\u4e2a\u6a21\u578b\u540d\uff08\u4f8b\u5982\uff1a`cartpole-v1-dqn`\uff09\u4e0a\u4f20\u65b0\u7684\u7248\u672c\u7684\u65f6\u5019\uff0c\u65b0\u7248\u672c\u4f1a\u81ea\u52a8\u7f16\u53f7\u3002\\n\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u91cd\u590d\u5411\u540c\u4e00\u4e2a\u6a21\u578b\u4e0a\u4f20\u65b0\u7248\u672c\u5373\u53ef\u3002\\n:::\\n\\n\u6211\u4eec\u53ef\u4ee5\u5728\u524d\u7aef\u754c\u9762\u4e2d\uff0c\u5f88\u8f7b\u677e\u7684\u67e5\u770b\u5230\u6240\u6709\u7684\u6a21\u578b\u7248\u672c\u4fe1\u606f\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Registered Models](mlflow-registered-models.png)\\n\\n### \u8bbe\u7f6e\u522b\u540d\\n\\n\u5f53\u6211\u4eec\u5728Experiments\u6a21\u5757\uff0c\u770b\u5230\u6307\u6807\u6bd4\u8f83\u597d\u7684\u8bad\u7ec3\u7ed3\u679c\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5176\u5173\u8054\u7684\u6ce8\u518c\u6a21\u578b\uff0c\u6253\u5f00\u76f8\u5173\u7684\u6a21\u578b\u8be6\u60c5\u9875\u9762\u3002\\n\\n\u6bd4\u5982\uff0c\u6211\u4eec\u770b\u5230\u6309\u7167\u6211\u4eec\u8bbe\u5b9a\u7684\u6307\u6807\u964d\u5e8f\uff0c\u7b2c\u4e00\u4e2a\u6a21\u578b\u6548\u679c\u6700\u597d\u3002\u5982\u4e0b\u56fe\uff1a\\n\\n![MLflow Experiments](mlflow-experiments.png)\\n*\u8bad\u7ec3\u5217\u8868\u9875\u9762*\\n\\n\u90a3\u6211\u4eec\u6253\u5f00\u76f8\u5173\u7684\u8bad\u7ec3\u9875\u9762\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6ce8\u518c\u6a21\u578b\u7684\u8fde\u63a5\u3002\u5982\u4e0b\u56fe\uff1a\\n\\n![MLflow Run](mlflow-run.png)\\n*\u8bad\u7ec3\u8be6\u60c5\u9875\u9762*\\n\\n\u5728\u70b9\u51fb\u76f8\u5173\u7684\u6a21\u578b\u8fde\u63a5\u540e\uff0c\u6211\u4eec\u4f1a\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u6a21\u578b\u8be6\u60c5\u9875\u3002\\n\u5728\u8be6\u60c5\u9875\u9762\uff0c\u6211\u4eec\u5355\u51fb`Aliases`\u53ef\u4ee5\u6765\u8bbe\u7f6e\u6211\u4eec\u60f3\u8981\u7684\u522b\u540d\u3002\\n\u6bd4\u5982\u5728\u4e0b\u56fe\u4e2d\uff0c\u6211\u4eec\u7ed9\u8be5\u6a21\u578b\u8bbe\u7f6e\u4e00\u4e2a\u540d\u4e3a`champion`\u7684\u522b\u540d\uff0c\u610f\u4e3a\u51a0\u519b\uff08\u6700\u597d\u7684\u6a21\u578b\uff09\u3002\\n\\n![MLflow Model Details](mlflow-model-details.png)\\n*\u6a21\u578b\u8be6\u60c5\u9875\u9875\u9762*\\n\\n:::tip \u522b\u540d\u7684\u8bbe\u7f6e\\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u6700\u597d\u7684\u6a21\u578b\u8bbe\u7f6e\u522b\u540d\u4e3a\\"\u51a0\u519b\\"\uff08`champion`\uff09\uff0c\\n\u800c\u7ed9\u4e00\u4e9b\u6f5c\u5728\u6bd4\u8f83\u6709\u4ef7\u503c\u7684\u6a21\u578b\uff0c\u5f85\u9a8c\u8bc1\u7684\u8bbe\u7f6e\\"\u6311\u6218\u8005\\"(`challenger`)\u8fd9\u6837\u7684\u522b\u540d\u3002\\n\\n\u4f46\uff0c\u5177\u4f53\u540d\u79f0\u7684\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u6309\u7167\u5177\u4f53\u7684\u5de5\u4f5c\u8981\u6c42\u6765\u8fdb\u884c\u7075\u6d3b\u8bbe\u7f6e\u3002\\n:::\\n\\n\u522b\u540d\u8bbe\u7f6e\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u9762\u7684\u6a21\u578b\u4e0b\u8f7d\u6b65\u9aa4\u4e2d\uff0c\u4e0b\u8f7d\u5bf9\u5e94\u522b\u540d\u7684\u6a21\u578b\u3002\\n\\n## \u4e0b\u8f7d\u4f7f\u7528\u6a21\u578b\\n\\n\u9488\u5bf9\u6211\u4eec\u4f7f\u7528\u7684Stable-Baselines3\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\u6765\u4f7f\u7528\u6211\u4eec\u4fdd\u5b58\u597d\u7684\u6a21\u578b\u3002\\n\\n```python\\nimport os\\nimport numpy as np\\nimport mlflow\\nimport gymnasium as gym\\nfrom tqdm import tqdm\\n\\ndef evaluate_mlflow():\\n    # Set up MLflow tracking URI\\n    mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\n\\n    # Create environment\\n    env = CartPoleWrapper(gym.make(\\"CartPole-v1\\", render_mode=None))\\n    \\n    # Load the model from MLflow Model Registry using the \\"Champion\\" stage\\n    model_name = \\"cartpole-v1-dqn\\"\\n    alias = \\"champion\\"\\n    loaded_model = mlflow.pyfunc.load_model(f\\"models:/{model_name}@{alias}\\")\\n    \\n    # Evaluate the model\\n    n_eval_episodes = 100\\n    episode_rewards = []\\n    \\n    for episode in tqdm(range(n_eval_episodes)):\\n        obs, _ = env.reset()\\n        done = False\\n        episode_reward = 0\\n        \\n        while not done:\\n            # Get prediction from MLflow model\\n            action = loaded_model.predict(np.array([obs], dtype=np.float64))\\n            obs, reward, terminated, truncated, _ = env.step(action[0])\\n            episode_reward += reward\\n            done = terminated or truncated\\n            \\n        episode_rewards.append(episode_reward)\\n    \\n    mean_reward = np.mean(episode_rewards)\\n    std_reward = np.std(episode_rewards)\\n    \\n    print(f\\"Mean reward: {mean_reward:.2f} +/- {std_reward:.2f}\\")\\n    print(f\\"Episode rewards: {episode_rewards}\\")\\n    \\n    return mean_reward, std_reward\\n```\\n\\n\u8ba9\u6211\u4eec\u6765\u8be6\u7ec6\u89e3\u91ca\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u5de5\u4f5c\u539f\u7406\uff1a\\n\\n1. \u9996\u5148\uff0c\u6211\u4eec\u8bbe\u7f6eMLflow\u7684\u8ffd\u8e2aURI\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5c31\u77e5\u9053\u4ece\u54ea\u91cc\u4e0b\u8f7d\u6a21\u578b\uff1a\\n\\n    ```python\\n    mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\n    ```\\n\\n2. \u521b\u5efa\u4e00\u4e2aCartPole\u73af\u5883\u7528\u4e8e\u8bc4\u4f30\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e`render_mode=None`\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u6570\u503c\u8bc4\u4f30\uff1a\\n\\n   ```python\\n   env = CartPoleWrapper(gym.make(\\"CartPole-v1\\", render_mode=None))\\n   ```\\n\\n3. \u4eceMLflow\u52a0\u8f7d\u6a21\u578b\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86\u6a21\u578b\u540d\u79f0\u548c\u4e0a\u9762\u521b\u5efa\u7684\u522b\u540d\u6765\u6307\u5b9a\u8981\u52a0\u8f7d\u7684\u5177\u4f53\u6a21\u578b\u7248\u672c\uff1a\\n\\n   ```python\\n   model_name = \\"cartpole-v1-dqn\\"\\n   alias = \\"champion\\"\\n   loaded_model = mlflow.pyfunc.load_model(f\\"models:/{model_name}@{alias}\\")\\n   ```\\n\\n   :::tip \u591a\u79cd\u6a21\u578b\u52a0\u8f7d\u6a21\u578b\\n   \u9664\u4e86\u4f7f\u7528\u522b\u540d\uff08`alias`\uff09\u6765\u52a0\u8f7d\u6a21\u578b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7684\u7248\u672c\u6765\u52a0\u8f7d\u6a21\u578b\u3002\u5982\uff1a\\n\\n   ```\\n   model = mlflow.pyfunc.load_model(model_uri=f\\"models:/{model_name}/{model_version}\\")\\n   ```\\n   :::\\n\\n4. \u8fdb\u884c\u6a21\u578b\u8bc4\u4f30\uff1a\\n   - \u8bbe\u7f6e\u8bc4\u4f30\u56de\u5408\u6570\u4e3a100\u6b21\\n   - \u5bf9\u4e8e\u6bcf\u4e2a\u56de\u5408\uff1a\\n     - \u91cd\u7f6e\u73af\u5883\u83b7\u53d6\u521d\u59cb\u89c2\u5bdf\u503c\\n     - \u5faa\u73af\u76f4\u5230\u56de\u5408\u7ed3\u675f\uff08done\u4e3aTrue\uff09\\n     - \u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u52a8\u4f5c\u5e76\u6267\u884c\\n     - \u7d2f\u8ba1\u5956\u52b1\u503c\\n   - \u6700\u540e\u8ba1\u7b97\u5e73\u5747\u5956\u52b1\u548c\u6807\u51c6\u5dee\\n\\n\u8fd9\u4e2a\u8bc4\u4f30\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u9a8c\u8bc1\u4eceMLflow\u4e0b\u8f7d\u7684\u6a21\u578b\u662f\u5426\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\\n\u4ee5\u53ca\u6a21\u578b\u7684\u6027\u80fd\u5982\u4f55\u3002\\n\\n\u901a\u8fc7\u8fd0\u884c\u591a\u4e2a\u56de\u5408\u5e76\u8ba1\u7b97\u5e73\u5747\u5956\u52b1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f83\u4e3a\u53ef\u9760\u7684\u6027\u80fd\u8bc4\u4f30\u7ed3\u679c\u3002\\n\\n\u6211\u4eec\u4e0a\u9762\u7684\u6a21\u578b\uff0c\u5728100\u4e2a\u56de\u5408\u540e\uff0c\u5747\u5206\u90fd\u4e3a\u6700\u9ad8\u5206\u3002\\n\u8fd9\u8bf4\u660e\u6211\u4eec\u4e4b\u524d\u8bad\u7ec3\u548c\u4fdd\u5b58\u7684\u6a21\u578b\u6027\u80fd\u90fd\u8f83\u4e3a\u7406\u60f3\u3002\\n\\n## \u603b\u7ed3\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528MLflow\u6765\u7ba1\u7406\u548c\u4fdd\u5b58\u5f3a\u5316\u5b66\u4e60\u6a21\u578b\uff0c\\n\u7279\u522b\u662f\u9488\u5bf9Stable-Baselines3\u6846\u67b6\u8bad\u7ec3\u7684\u6a21\u578b\u3002\\n\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a\\n\\n1. \u901a\u8fc7\u7ee7\u627f`MLflow.pyfunc.PythonModel`\u521b\u5efa\u81ea\u5b9a\u4e49\u5305\u88c5\u7c7b\uff0c\u4f7fMLflow\u80fd\u591f\u7406\u89e3\u548c\u52a0\u8f7d\u6211\u4eec\u7684DQN\u6a21\u578b\u3002\\n2. \u4f7f\u7528`mlflow.pyfunc.log_model`\u65b9\u6cd5\u5c06\u6a21\u578b\u4fdd\u5b58\u5230MLflow\u4e2d\u3002\\n3. \u5728MLflow\u754c\u9762\u4e2d\u67e5\u770b\u548c\u7ba1\u7406\u6a21\u578b\u7248\u672c\uff0c\u8bbe\u7f6e\u6a21\u578b\u522b\u540d\u3002\\n4. \u4eceMLflow\u4e2d\u52a0\u8f7d\u6a21\u578b\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002\\n\\n\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u6a21\u578b\u7ba1\u7406\u65b9\u6848\uff0c\u8fd8\u80fd\u591f\u65b9\u4fbf\u5730\u8fdb\u884c\u6a21\u578b\u7248\u672c\u63a7\u5236\u548c\u90e8\u7f72\u3002\\n\u901a\u8fc7MLflow\u7684\u6a21\u578b\u6ce8\u518c\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u8ffd\u8e2a\u548c\u7ba1\u7406\u4e0d\u540c\u7248\u672c\u7684\u6a21\u578b\uff0c\\n\u4e3a\u6a21\u578b\u7684\u8fed\u4ee3\u4f18\u5316\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u57fa\u7840\u3002\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- [MLflow Model Registry - Registering an Unsupported Machine Learning Model](https://mlflow.org/docs/latest/model-registry.html#registering-an-unsupported-machine-learning-model)"},{"id":"mlflow-change-db","metadata":{"permalink":"/eason-blog/blog/mlflow-change-db","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-05-mlflow-change-db/index.md","source":"@site/blog/2025-02-05-mlflow-change-db/index.md","title":"MLflow\u4f7f\u7528PostgresSQL","description":"MLflow\u9ed8\u8ba4\u4f7f\u7528\u7684\u662fSQLite\u6765\u5b58\u50a8\u5b9e\u9a8c\u6570\u636e\u7b49\u4fe1\u606f\u3002","date":"2025-02-05T00:00:00.000Z","tags":[{"inline":false,"label":"Machine Learning","permalink":"/eason-blog/blog/tags/machine-learning","description":"Machine Learning related posts"},{"inline":false,"label":"Database","permalink":"/eason-blog/blog/tags/database","description":"Database related posts"},{"inline":false,"label":"MLflow","permalink":"/eason-blog/blog/tags/mlflow","description":"MLflow related posts"}],"readingTime":9.205,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"mlflow-change-db","title":"MLflow\u4f7f\u7528PostgresSQL","authors":"eason","tags":["ml","db","mlflow"]},"unlisted":false,"prevItem":{"title":"MLflow\u4fdd\u5b58\u4e0e\u4f7f\u7528\u6a21\u578b","permalink":"/eason-blog/blog/mlflow-log-model"},"nextItem":{"title":"MLflow\u4f7f\u7528\u4ecb\u7ecd","permalink":"/eason-blog/blog/mlflow-intro"}},"content":"MLflow\u9ed8\u8ba4\u4f7f\u7528\u7684\u662fSQLite\u6765\u5b58\u50a8\u5b9e\u9a8c\u6570\u636e\u7b49\u4fe1\u606f\u3002\\n\u4f46\u662f\u5f53\u5b9e\u9a8c\u6570\u91cf\u589e\u5927\uff0c\u540e\u7aef\u7684\u67e5\u8be2\u6548\u7387\u4f1a\u4e0b\u964d\u3002\\n\\n\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u66f4\u4e3a\u5065\u58ee\u7684\u6570\u636e\u5e93\uff0c\u6bd4\u5982PostgresSQL\uff08\u4e0b\u6587\u4e2d\uff0c\u7b80\u5199\u4e3aPostgres\uff09\u3002\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c31\u63cf\u8ff0\u4e86\uff0c\u5982\u4f55\u66ff\u6362MLflow\u9ed8\u8ba4\u7684SQLite\u4e3aPostgres\u6765\u52a0\u901f\u540e\u7aef\u6570\u636e\u7684\u5904\u7406\u80fd\u529b\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u642d\u5efaPostgres\u6570\u636e\u5e93\\n\\n\u8981\u4f7f\u7528Postgre\u540e\u7aef\u6570\u636e\u5e93\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u642d\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u7684\u793a\u4f8b\u3002\\n\u5728\u672c\u6587\uff0c\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u5982\u4f55\u5728\u672c\u5730\u642d\u5efa\u4e00\u4e2aPostgres\u6570\u636e\u5e93\u3002\\n\\n\u4e3a\u4e86\u65b9\u4fbf\u663e\u793a\uff0c\u6211\u4eec\u6b64\u5904\u4f7f\u7528Docker\u6765\u5feb\u901f\u642d\u5efa\u76f8\u5173\u7684\u6570\u636e\u5e93\u3002\\n\\n### \u5b89\u88c5Docker\\n\\n\u5728\u642d\u5efa\u4e4b\u524d\uff0c\u8bf7\u5b89\u88c5\u597dDocker\u3002\u5177\u4f53\u8bf7\u53c2\u8003Docker\u5b98\u7f51\\n\uff08[https://www.docker.com](https://www.docker.com)\uff09\u8fdb\u884c\u5b89\u88c5\u3002\\n\\n\u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u9ed8\u8ba4\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86Docker\u73af\u5883\u3002\\n\\n### \u521b\u5efa\u73af\u5883\u53d8\u91cf\u6587\u4ef6`.env`\\n\\n\u7531\u4e8e\u6211\u4eec\u542f\u52a8Docker\u7684\u65f6\u5019\uff0c\u5e0c\u671b\u81ea\u52a8\u52a0\u8f7d\u6211\u4eec\u9884\u8bbe\u597d\u7684\u5bc6\u7801\u4fe1\u606f\u3002\\n\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u8fc7\u672c\u5730\u521b\u5efa\u4e00\u4e2a`.env`\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```plaintext\\nPOSTGRES_USER=username\\nPOSTGRES_PASSWORD=password\\nPOSTGRES_DB=mlflow\\n```\\n\\n\u5728\u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u7684\u8d26\u6237\u3001\u5bc6\u7801\u4ee5\u53ca\u6570\u636e\u5e93\u540d\u79f0\u3002\\n\\n### \u542f\u52a8Docker\u955c\u50cf\\n\\n\u5728\u4e0a\u9762\u7684\u6587\u4ef6\u51c6\u5907\u597d\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u547d\u4ee4\u6765\u542f\u52a8\u6211\u4eec\u7684Postgres\u955c\u50cf\u4e86\u3002\\n\\n```shell\\ndocker run --name postgres_mlflow \\\\\\n    --env-file ./.env \\\\\\n    -v ./data:/var/lib/postgresql/data \\\\\\n    -e PGDATA=/var/lib/postgresql/data/db-files/ \\\\\\n    -p 5432:5432 \\\\\\n    -d postgres\\n```\\n\\n\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6211\u4eec\u542f\u52a8\u4e86\u4e00\u4e2a\u540d\u4e3a`postgres_mlflow`\u7684Docker\u5bb9\u5668\uff0c\u4f7f\u7528\u7684\u662f`postgres`\u5b98\u65b9\u6700\u65b0\u955c\u50cf\u3002\\n\\n\u540c\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u547d\u4ee4`--env-file ./.env`\u5c06\u4e0a\u9762\u521b\u5efa\u7684`.env`\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u4e86\u52a0\u8f7d\u3002\\n\\n\u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u5c06\u672c\u5730\u7684\u6587\u4ef6\u5939`./data`\u6620\u5c04\u5230\u4e86\u5bb9\u5668\u4e2d\u7684`/var/lib/postgresql/data`\u6570\u636e\u76ee\u5f55\u3002\\n\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5728Docker\u5bb9\u5668\u5173\u95ed\u540e\uff0c\u4ecd\u7136\u53ef\u4ee5\u4fdd\u5b58\u3002\\n\u4ee5\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u968f\u7740\u5bb9\u5668\u7684\u542f\u52a8\u548c\u5173\u95ed\u800c\u5bfc\u81f4\u4e22\u5931\u3002\\n\\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5bb9\u5668\u7684`5432`\u7aef\u53e3\uff0c\u6620\u5c04\u5230\u4e86\u5bbf\u4e3b\u673a\u7684`5432`\u7aef\u53e3\u3002\\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbf\u95ee\u672c\u5730\u7684`5432`\u7aef\u53e3\u6765\u8bbf\u95ee\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e86\u3002\\n\\n### \uff08\u53ef\u9009\uff09\u68c0\u67e5\u955c\u50cf\u542f\u52a8\u60c5\u51b5\\n\\n\u5728\u955c\u50cf\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7`docker ps`\u6765\u67e5\u770b\u955c\u50cf\u7684\u542f\u52a8\u60c5\u51b5\u3002\\n\u5982\u4e0b\u9762\u7684\u6267\u884c\u7ed3\u679c\uff1a\\n\\n```plaintext\\nCONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES\\ne0a13ac10ec2   postgres   \\"docker-entrypoint.s\u2026\\"   5 seconds ago   Up 4 seconds   0.0.0.0:5432->5432/tcp   postgres_mlflow\\n```\\n\\n\u4ece\u4e0a\u9762\u7684\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u7684\u542f\u52a8\u4e86`postgres`\u955c\u50cf\uff0c\u5176\u540d\u79f0\u4e3a\uff1a`postgres_mlflow`\u3002\\n\u540c\u65f6\uff0c\u6211\u4eec\u5bbf\u4e3b\u673a\u7684`5432`\u7aef\u53e3\u4e5f\u6620\u5c04\u5230\u4e86\u5bb9\u5668\u4e2d\u7684`5432`TCP\u7aef\u53e3\u3002\\n\\n\u8fd9\u4e5f\u8bf4\u660e\uff0c\u6211\u4eec\u7684\u6570\u636e\u5e93\u5728\u5bb9\u5668\u542f\u52a8\u5c42\u9762\uff0c\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\\n\\n:::tip \u6ca1\u6709\u76f8\u5173\u7ed3\u679c\u600e\u4e48\u529e\uff1f\\n\u5982\u679c\u5728`docker ps`\u547d\u4ee4\u4e2d\u6ca1\u6709\u770b\u5230\u76f8\u5173\u7684\u8f93\u51fa\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u5f02\u5e38\u539f\u56e0\u5bfc\u81f4\u7684\u3002\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7`docker ps -a`\u547d\u4ee4\u6765\u67e5\u770b\u6240\u6709\u7684Docker\u5bb9\u5668\u7684\u542f\u52a8\u60c5\u51b5\uff0c\u770b\u770b\u662f\u5426\u6709\u5f02\u5e38\u53d1\u751f\u3002\\n\\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u68c0\u67e5\u76f8\u5173\u7684\u5bb9\u5668\u5931\u8d25\u539f\u56e0\uff1a\\n\\n- `docker logs <CONTAINER_ID>`\uff1a\u6b64\u547d\u4ee4\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u67e5\u770b\u5230\u5931\u8d25\u5bb9\u5668\u7684\u65e5\u5fd7\u4fe1\u606f\u3002\\n- `docker inspect <CONTAINER_ID>`\uff1a\u6b64\u547d\u4ee4\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u67e5\u770b\u76f8\u5173\u5bb9\u5668\u7684\u914d\u7f6e\u4fe1\u606f\u7b49\u3002\\n:::\\n\\n### \uff08\u53ef\u9009\uff09\u8fde\u63a5\u6d4b\u8bd5Postgres\u6570\u636e\u5e93\\n\\n\u4e3a\u4e86\u9a8c\u8bc1\u6211\u4eec\u7684\u6570\u636e\u5e93\u662f\u5426\u642d\u5efa\u5b8c\u6bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u542f\u52a8\\n[Adminer](https://hub.docker.com/_/adminer/) Docker\u955c\u50cf\uff0c\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u6570\u636e\u5e93\u670d\u52a1\u3002\\n\u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u6765\u542f\u52a8\u76f8\u5173\u7684\u670d\u52a1\uff1a\\n\\n```shell\\ndocker run --link postgres_mlflow:db -p 8080:8080 -d adminer\\n```\\n\\n\u4e0a\u8ff0\u547d\u4ee4\u4e2d\u7684`--link postgres_mlflow:db`\u7684\u610f\u601d\u662f\uff0c\\n\u6211\u4eec\u5e0c\u671b\u5c06\u4e0a\u9762`postgres_mlflow`\u547d\u540d\u7684\u5bb9\u5668\u4ee5`db`\u7684\u522b\u540d\uff0c\\n\u88ab\u6211\u4eec\u65b0\u521b\u5efa\u7684`adminer`\u955c\u50cf\u5bb9\u5668\u6765\u8fdb\u884c\u8bbf\u95ee\u3002\\n\\n\u542f\u52a8\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a\\n[http://localhost:8080](http://localhost:8080)\u6765\u67e5\u770b\u6211\u4eec\u7684\u6570\u636e\u5e93\u3002\\n\\n\u6211\u4eec\u5728\u767b\u9646\u754c\u9762\uff0c\u6211\u4eec\u9009\u62e9`PostgreSQL`\uff0c\u5e76\u8f93\u5165\u76f8\u5173\u7684\u767b\u9646\u4fe1\u606f\uff0c\u5982\uff1a\\n\\n![Adminer Login UI](./adminer-login-ui.png)\\n\\n\u70b9\u51fb`Login`\u767b\u9646\u6309\u94ae\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u987a\u5229\u770b\u5230\u6211\u4eec\u7684\u7cfb\u7edf\u4fe1\u606f\uff0c\u5982\uff1a\\n\\n![Adminer UI](./adminer-ui.png)\\n\\n### \u5c0f\u7ed3\\n\\n\u4ee5\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7Docker\u5bb9\u5668\u7684\u65b9\u5f0f\uff0c\u987a\u5229\u7684\u642d\u5efa\u6765\u672c\u5730\u7684Postgres\u6570\u636e\u5e93\u3002\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4fee\u6539MLflow\u7684\u540e\u53f0\u670d\u52a1\u5668\u5730\u5740\uff0c\u6765\u4f7f\u7528\u6211\u4eec\u65b0\u642d\u5efa\u7684Postgres\u6570\u636e\u5e93\u670d\u52a1\u4e86\u3002\\n\\n## MLflow\u4f7f\u7528\u65b0\u7684\u6570\u636e\u5e93\\n\\nMLflow Server\u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a`--backend-store-uri`\u53c2\u6570\u3002\\n\u8be5\u53c2\u6570\u9ed8\u8ba4\u4f7f\u7528\u672c\u5730\u4e00\u4e2a\u540d\u4e3a`./mlruns`\u7684\u6587\u4ef6\u5939\uff0c\u6765\u5b58\u50a8\u6240\u6709\u7684\u5b9e\u9a8c\u6570\u636e\u3002\\n\\n\u6211\u4eec\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a`SQLAlchemy`\u53ef\u63a5\u53d7\u7684\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\u6765\u8ba9MLflow\u670d\u52a1\u5668\u8fde\u63a5\u6211\u4eec\u7684Postgres\u6570\u636e\u5e93\u3002\\n\\n### \u5c06`.env`\u6587\u4ef6\u5185\u5bb9\u8bbe\u7f6e\u4e3a\u73af\u5883\u53d8\u91cf\\n\\n\u4e3a\u4e86\u589e\u52a0\u5b89\u5168\u6027\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5c06`.env`\u6587\u4ef6\u5185\u5bb9\u66b4\u9732\u5230\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u65b9\u5f0f\uff0c\\n\u8ba9MLflow\u53ef\u4ee5\u4f7f\u7528\u76f8\u5173\u7684\u6570\u636e\u5e93\u5bc6\u7801\u4fe1\u606f\u3002\\n\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06`.env`\u6587\u4ef6\u4fe1\u606f\u66b4\u9732\uff1a\\n\\n```shell\\nexport $(cat .env | xargs)\\n```\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6d4b\u8bd5\u6548\u679c\uff1a\\n\\n```shell\\necho $POSTGRES_USER\\n```\\n\\n\u5176\u8f93\u51fa\u5e94\u4e3a\uff1a\\n\\n```plaintext\\nusername\\n```\\n\\n### \u4f7f\u7528\u65b0\u7684\u6570\u636e\u5e93\\n\\n\u5f53\u6211\u4eec\u7684\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u5df2\u7ecf\u6709\u6211\u4eec\u9700\u8981\u7684\u8d26\u53f7\u5bc6\u7801\u4fe1\u606f\u540e\uff0c\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u8fde\u63a5\u6211\u4eec\u7684\u6570\u636e\u5e93\uff1a\\n\\n```shell\\nmlflow server \\\\\\n    --host 0.0.0.0 \\\\\\n    --port 8081 \\\\\\n    --backend-store-uri postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/mlflow\\n```\\n\\n\u5176\u4e2d`--backend-store-uri`\u7684\u53c2\u6570\u7684\u542b\u4e49\u4e3a\uff1a\\n\\n\u4f7f\u7528\u8d26\u53f7\uff08`$POSTGRES_USER`\uff09\u4ee5\u53ca\u5bc6\u7801\uff08`$POSTGRES_PASSWORD`\uff09\uff0c\\n\u8fde\u63a5\u5230\u672c\u5730\uff08`localhost`\uff09\u7684`5432`\u7aef\u53e3\u7684`mlflow`\u6570\u636e\u5e93\u3002\\n\\n\u5728MLflow\u542f\u52a8\u6210\u529f\u540e\uff0c\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\uff1a[http://localhost:8081](http://localhost:8081)\uff0c\\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5d2d\u65b0\u7684MLflow\u5b9e\u4f8b\u3002\\n\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow New Instance](./mlflow-new-instance.png)\\n\\n:::tip \u4e4b\u524d\u7684\u6570\u636e\u4e0d\u89c1\u4e86\uff1f\\n\u5982\u679c\u4e4b\u524d\u6709\u542f\u52a8\u8fc7MLflow\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u5230\u4e4b\u524d\u7684\u8bb0\u5f55\u90fd\u5df2\u7ecf\u6d88\u5931\u4e86\u3002\\n\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u542f\u52a8\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93\uff0c\u4e4b\u524d\u7684\u8bb0\u5f55\u5728\u53e6\u5916\u7684\u5730\u65b9\u3002\\n:::\\n\\n### \uff08\u53ef\u9009\uff09\u4f7f\u7528Docker\u8fd0\u884cMLflow\\n\\n```bash\\ndocker run -p 8090:5000 \\\\\\n    --link postgres_mlflow:db \\\\\\n    --env-file .env \\\\\\n    -v ./artifacts=/mlflow/artifacts \\\\\\n    ghcr.io/mlflow/mlflow \\\\\\n    bash -c \\"python3 -m pip install pip --upgrade && python3 -m pip install psycopg2-binary && mlflow server\\"\\n```\\n\\n\u4f7f\u7528\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Docker\u6765\u8fd0\u884c\u6211\u4eec\u7684MLFlow\u670d\u52a1\u3002\\n\\n:::tip \u8bf7\u5408\u7406\u8bbe\u7f6e.env\u73af\u5883\\n\\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5408\u7406\u7684\u8bbe\u7f6e`.env`\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5176\u53ef\u5305\u62ec\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n```env\\nPOSTGRES_USER=****\\nPOSTGRES_PASSWORD=****\\nPOSTGRES_DB=mlflow\\nMLFLOW_BACKEND_STORE_URI=postgresql://****:****@db:5432/mlflow\\nMLFLOW_HOST=0.0.0.0\\nMLFLOW_PORT=5000\\n```\\n\\n:::\\n\\n### \uff08\u53ef\u9009\uff09\u68c0\u67e5\u6570\u636e\u5e93\\n\\n\u5728MLflow\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u6253\u5f00\u4e4b\u524d\u521b\u5efa\u7684Adminer\u5de5\u5177\uff0c\u6765\u67e5\u770b\u6570\u636e\u5e93\u662f\u5426\u8fd0\u884c\u6b63\u5e38\u3002\\n\u6211\u4eec\u9009\u62e9`mlflow`\u6570\u636e\u5e93\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7cfb\u7edf\u81ea\u52a8\u521b\u5efa\u7684\u8868\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Tables](./mlflow-tables.png)\\n\\n\u8fd9\u4e5f\u8bf4\u660e\uff0c\u6211\u4eec\u540e\u7eed\u7684MLflow\u6570\u636e\u4f1a\u5b58\u50a8\u5230\u76f8\u5173\u7684\u6570\u636e\u5e93\u8868\u4e2d\u3002\\n\\n\u5982\u679c\u6211\u4eec\u8981\u5728\u540e\u7eed\u8fdb\u884c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u53ef\u4ee5\u767b\u9646\u5230\u6570\u636e\u5e93\u7684\u540e\u53f0\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u64cd\u4f5c\u3002\\n\\n## \u603b\u7ed3\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7Docker\u642d\u5efa\u4e86\u4e00\u4e2aPostgres\u7684\u6570\u636e\u5e93\u670d\u52a1\u3002\\n\u5e76\u8c03\u6574\u4e86MLflow\u7684\u542f\u52a8\u65b9\u5f0f\uff0c\u8ba9\u5176\u8fde\u63a5\u6211\u4eec\u65b0\u7684\u6570\u636e\u5e93\u6765\u5b58\u50a8\u5b9e\u9a8c\u6570\u636e\uff0c\u786e\u4fdd\u53ef\u4ee5\u957f\u671f\u7684\u5b58\u50a8\u5b9e\u9a8c\u7ed3\u679c\u3002\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u672c\u6587\u4e2d\u7684\u65b9\u6cd5\u4ec5\u4e3a\u6f14\u793a\u76ee\u7684\u3002\\n\u5982\u679c\u662f\u771f\u6b63\u7684\u751f\u4ea7\u73af\u5883\uff0c\u8fd8\u9700\u8981\u642d\u5efa\u751f\u4ea7\u73af\u5883\u6807\u51c6\u7684\u6570\u636e\u5e93\u4ee5\u53caMLflow\u5b9e\u4f8b\u3002"},{"id":"mlflow-intro","metadata":{"permalink":"/eason-blog/blog/mlflow-intro","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-03-mlflow-setup/index.md","source":"@site/blog/2025-02-03-mlflow-setup/index.md","title":"MLflow\u4f7f\u7528\u4ecb\u7ecd","description":"\u5728\u6211\u4eec\u4f7f\u7528Ray Tune\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u4e2a\u5f00\u6e90\u4e14\u529f\u80fd\u5b8c\u5907\u7684\u5b9e\u9a8c\u8ffd\u8e2a\u5e73\u53f0\u3002","date":"2025-02-03T00:00:00.000Z","tags":[{"inline":false,"label":"Machine Learning","permalink":"/eason-blog/blog/tags/machine-learning","description":"Machine Learning related posts"},{"inline":false,"label":"MLflow","permalink":"/eason-blog/blog/tags/mlflow","description":"MLflow related posts"}],"readingTime":8.05,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"mlflow-intro","title":"MLflow\u4f7f\u7528\u4ecb\u7ecd","authors":"eason","tags":["ml","mlflow"]},"unlisted":false,"prevItem":{"title":"MLflow\u4f7f\u7528PostgresSQL","permalink":"/eason-blog/blog/mlflow-change-db"},"nextItem":{"title":"Ray Tune","permalink":"/eason-blog/blog/ray-tune"}},"content":"\u5728\u6211\u4eec\u4f7f\u7528Ray Tune\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u4e2a\u5f00\u6e90\u4e14\u529f\u80fd\u5b8c\u5907\u7684\u5b9e\u9a8c\u8ffd\u8e2a\u5e73\u53f0\u3002\\n\u53ef\u4ee5\u6765\u5e2e\u52a9\u6211\u4eec\u8ffd\u8e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u8c03\u4f18\u7684\u53c2\u6570\uff0c\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u5b9e\u9a8c\u5bf9\u5e94\u7684\u6700\u7ec8\u6307\u6807\u7ed3\u679c\u7b49\u3002\\n\\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c1d\u8bd5\u63a2\u7d22\u901a\u8fc7\u642d\u5efa\u672c\u5730\u7684MLflow\u6765\u8fdb\u884c\u76f8\u5173\u7684\u7ba1\u7406\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## MLflow\u7684\u4e3b\u8981\u529f\u80fd\\n\\nMLflow\u63d0\u4f9b\u4e86\u5305\u542b\u8bad\u7ec3\u5b9e\u9a8c\uff0c\u6a21\u578b\u6ce8\u518c\u7ba1\u7406\u90e8\u7f72\u7b49\u591a\u79cd\u80fd\u529b\u3002\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u4f1a\u63a2\u7d22\u5176\u8bad\u7ec3\u8bb0\u5f55\u76f8\u5173\u7684\u80fd\u529b\uff0c\u7528\u4e8e\u914d\u5408Ray Tune\u5bfb\u627e\u5408\u9002\u7684\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u53c2\u6570\u3002\\n\\n## MLflow Tracking\\n\\n\u5982\u4e0b\u56fe\u6240\u793a\uff0cMLflow\u4e2d\u7684\u67b6\u6784\u4e3b\u8981\u5305\u542b\u5982\u4e0b\u6982\u5ff5\uff1a\\n\\n- **Experiments**\uff1a\u6240\u6709\u7684\u8bad\u7ec3\u8ddf\u8e2a\uff0c\u90fd\u662f\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9e\u9a8c\u4e2d\u6765\u8fdb\u884c\u8ffd\u8e2a\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u5de5\u4f5c\uff0c\u521b\u5efa\u591a\u4e2aExperiments\u3002\\n- **Run**\uff1a\u5c31\u662f\u6bcf\u4e00\u6b21\u7684\u8bad\u7ec3\u6216\u8005\u8fd0\u884c\uff0c\u6bcf\u4e00\u4e2a\u8bad\u7ec3\uff0c\u5173\u8054\u4e00\u7ec4\u914d\u7f6e\u6216\u8005\u6307\u6807\uff0c\u4ea7\u751f\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6a21\u578b\u3002\\n\\n![MLflow Tracking Architecture](./mlflow-tracking-architecture.png)\\n*Source: https://mlflow.org/docs/latest/getting-started/index.html#mlflow-tracking*\\n\\n\u5728\u4e0a\u9762\u56fe\u793a\u4e2d\uff0c\u5de6\u4fa7\u4e3aExperiments\uff0c\u53f3\u4fa7\u4e3a\u5bf9\u5e94Experiment\u7684Runs\u3002\\n\u70b9\u5f00\u67d0\u4e00\u4e2aRun\u4ee5\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u914d\u7f6e\u3001\u6307\u6807\u4ee5\u53ca\u6a21\u578b\u7b49\u5185\u5bb9\u3002\\n\\n## \u8fd0\u884cMLflow\\n\\n\u5728\u672c\u6587\uff0c\u6211\u4eec\u7b80\u5355\u8bbe\u7f6e\u4e00\u4e2a\u672c\u5730\u7684MLflow\u5b9e\u4f8b\u3002\\n\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684MLflow\uff1a\\n\\n```shell\\npip install mlflow\\n```\\n\\n\u5b89\u88c5\u6210\u529f\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\uff0c\u6765\u542f\u52a8\u6211\u4eec\u7684\u670d\u52a1\uff1a\\n\\n```shell\\nmlflow server --host 0.0.0.0 --port 8080\\n```\\n\\n:::tip MLflow\u7f51\u5740\u548c\u7aef\u53e3\u8bbe\u7f6e\\n\u4e0a\u9762\u547d\u4ee4\u4e2d\uff0c\u542f\u52a8\u4e86\u6211\u4eec\u7684MLflow\u57280.0.0.0\u7f51\u5740\u4e0a\uff0c\\n\u8fd9\u4e2a\u7f51\u5740\u8bbe\u7f6e\u4f1a\u8ba9\u6240\u6709\u80fd\u8bbf\u95ee\u5230\u673a\u5668\u7f51\u7edc\u7684\u8bbe\u5907\u8bbf\u95ee\u5230\u6211\u4eec\u7684MLflow\u3002\\n\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u8bf7\u8c28\u614e\u8bbe\u7f6e\u3002\\n\\n\u53e6\uff0c\u5982\u679c\u7aef\u53e38080\u5df2\u7ecf\u5360\u7528\uff0c\u53ef\u4f7f\u7528\u5176\u4ed6\u7684\u7aef\u53e3\u8bbe\u7f6e\u3002\\n:::\\n\\n\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a[http://localhost:8080](http://localhost:8080)\\n\u6765\u67e5\u770b\u6211\u4eec\u7684MLflow\u670d\u52a1\u548c\u76f8\u5173\u8bad\u7ec3\u4fe1\u606f\u7b49\u3002\u9875\u9762\u5982\u4e0b\u6240\u793a\uff1a\\n\\n![MLflow Landing Page](./mlflow-fresh-page.png)\\n\\n## MLflow\u7b80\u5355\u4f7f\u7528\u6837\u4f8b\\n\\n\u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u7801\u793a\u4f8b\u6765\u5c55\u793a\u5982\u4f55\u4f7f\u7528Python\u6765\u4fdd\u5b58\u8bad\u7ec3\u7684\u53c2\u6570\u548c\u7ed3\u679c\u3002\\n\\n### \u521b\u5efaExperiment\\n\\n```python\\nimport mlflow\\n\\nMLFLOW_TRACKING_URI = \\"http://localhost:8080\\"\\n\\nmlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\nmlflow.set_experiment(\\"experiment_1\\")\\n```\\n\\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5f15\u5165`mlflow`\u6a21\u5757\uff0c\u7136\u540e\u4f7f\u7528\u6211\u4eec\u524d\u9762\u8bbe\u7f6e\u597d\u7684MLflow\u672c\u5730\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\\n\u540e\u9762\u6211\u4eec\u7684\u6570\u636e\u4f1a\u53d1\u9001\u5230\u5bf9\u5e94\u5730\u5740\u7684\u670d\u52a1\u5668\u540e\u53f0\u3002\\n\\n\u540c\u65f6\u6211\u4eec\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a`experiment_1`\u7684Experiment\u540d\u79f0\u3002\\n\u540e\u9762\u6240\u6709\u7684Runs\uff0c\u90fd\u4f1a\u4fdd\u5b58\u5728\u8be5\u540d\u79f0\u4e0b\u3002\\n\\n### \u8bbe\u7f6eRun\u7684\u53c2\u6570\\n\\n\u5bf9\u4e8e\u6211\u4eec\u4e00\u822c\u7684\u8bad\u7ec3\u5e94\u7528\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u8be5Run\u6240\u5173\u8054\u7684\u53c2\u6570\uff08\u6bd4\u5982\u8d85\u53c2\u6570\u7b49\u4fe1\u606f\uff09\\n\\n\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u7684\u4ee3\u7801\u521b\u5efa\u5e76\u8bb0\u5f55\u76f8\u5173\u7684\u53c2\u6570\uff1a\\n\\n```python\\nwith mlflow.start_run(run_name=\'Run Name #1\'):\\n    # Log with mlflow.log_param\\n    mlflow.log_param(\\"param1\\", 0.1283)\\n    mlflow.log_param(\\"param2\\", 0.238292)\\n\\n    # Log with mlflow.log_params\\n    mlflow.log_params({\\n        \\"param3\\": 0.392,\\n        \\"param4\\": 0.4829,    \\n    })\\n```\\n\\n\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\uff1a\\n\\n```python\\nwith mlflow.start_run(run_name=\'Run Name #1\'):\\n```\\n\\n\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Run\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2aRun Name\uff1a`Run Name #1`\u3002\\n\\n\u7136\u540e\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8bb0\u5f55\u53c2\u6570\uff1a\\n\\n- `mlflow.log_param`\uff1a \u901a\u8fc7Key Value\u7684\u5f62\u5f0f\uff0c\u8bb0\u5f55\u67d0\u4e00\u4e2a\u53c2\u6570\u9879\u76ee\u3002\\n- `mlflow.log_params`\uff1a\u901a\u8fc7\u5b57\u5178\u5f62\u5f0f\uff0c\u6765\u6279\u91cf\u63d0\u4f9b\u4e00\u7ec4\u53c2\u6570\u8bbe\u7f6e\u3002\\n\\n\u76f8\u5173\u7684\u53c2\u6570\u4f1a\u8bb0\u5f55\u5728MLflow\u4e2d\uff0c\u524d\u7aef\u754c\u9762\u5c55\u793a\u6548\u679c\u5982\u4e0b\uff1a\\n\\n![Run Parameters](mlflow-run-parameters.png)\\n\\n### \u8bb0\u5f55\u6a21\u578b\u6307\u6807\\n\\n\u5f53\u6a21\u578b\u8bad\u7ec3\u6280\u672f\uff0c\u4ee5\u53ca\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6a21\u578b\u7684\u6307\u6807\uff0c\u6765\u8ffd\u8e2a\u8bad\u7ec3\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5bf9\u6bd4\u6a21\u578b\u7684\u6548\u679c\u3002\\n\\n\u7c7b\u4f3c\u53c2\u6570\u7684\u8bb0\u5f55\uff0c\u6a21\u578b\u6307\u6807\u7684\u8bb0\u5f55\u4e5f\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a\\n\\n```python\\n    mlflow.log_metric(\\"metric_once\\", 100 * random.random())\\n    mlflow.log_metrics({\\n        \\"metric_1\\": 1.1019,\\n        \\"metric_2\\": 2.3829,\\n        \\"metric_3\\": 3.9842,\\n    })\\n```\\n\\n\u65e2\uff0c\u901a\u8fc7\u5982\u4e0b\u4e24\u4e2a\u65b9\u6cd5\uff1a\\n\\n- `mlflow.log_metric`\uff1a\u8bb0\u5f55\u67d0\u4e00\u4e2a\u6307\u6807\uff0c\u4e5f\u662f\u6309\u7167Key Value\u5f62\u5f0f\u8fdb\u884c\u8bb0\u5f55\u3002\\n- `mlflow.log_metrics`\uff1a\u8bb0\u5f55\u4e00\u7ec4\u6307\u6807\uff0c\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u8fdb\u884c\u8bb0\u5f55\u3002\\n\\n\u53e6\u5916\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u901a\u8fc7\u591a\u6b21\u8bb0\u5f55\u7684\u65b9\u5f0f\uff0c\u6765\u8ffd\u8e2a\u76f8\u5173\u6307\u6807\u7684\u53d8\u5316\u60c5\u51b5\u3002\\n\u6240\u4ee5\uff0c\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u7684\u4ee3\u7801\uff0c\u6765\u8fdb\u884c\u8bad\u7ec3\u8fc7\u7a0b\u7684\u793a\u610f\uff1a\\n\\n```python\\n    for i in range(10):\\n        mlflow.log_metric(\\"metric_update\\", i * random.random())\\n\\n        mlflow.log_metric(\\"metric_step\\", 30 * i * (random.random() + 1), step=i)\\n\\n        mlflow.log_metrics({\\n            \\"metric_step_3\\": 100 * i * (random.random() + 1),\\n            \\"metric_step_4\\": 200 * i * (random.random() + 1),\\n        }, step=i)\\n```\\n\\n\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5faa\u73af\uff0c\u6765\u6a21\u62df\u8bad\u7ec3\u8fc7\u7a0b\u7684\u6307\u6807\u8bb0\u5f55\u3002\\n\u5176\u4e2d\uff1a\\n\\n- `metric_update`\uff1a\u8be5\u6307\u6807\u5728\u6bcf\u6b21\u7684\u5faa\u73af\u4e2d\uff0c\u90fd\u8fdb\u884c\u4e86\u8bb0\u5f55\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u591a\u6b21\u7684`log_metric`\u6765\u8bb0\u5f55\u6307\u6807\u7684\u66f4\u65b0\u8fc7\u7a0b\u3002\\n- `metric_step`\uff1a\u8be5\u6307\u6807\u9664\u4e86\u591a\u6b21\u8bb0\u5f55\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86`step`\u53c2\u6570\u7684\u8bbe\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ddf\u8e2astep\u7684\u53d8\u5316\u6765\u8ffd\u8e2a\u6307\u6807\u3002\\n- `metric_step_3/4`\uff1a\u8fd9\u51e0\u4e2a\u6307\u6807\u793a\u4f8b\u4e86\uff0c\u5982\u679c\u901a\u8fc7\u5b57\u5178\u4ee5\u53castep\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u6765\u8ddf\u8e2a\u591a\u4e2a\u6307\u6807\u7684\u53d8\u5316\u60c5\u51b5\u3002\\n\\n### \u524d\u7aef\u6307\u6807\u770b\u677f\\n\\n#### \u6307\u6807\u6c47\u603b\\n\\n\u5728Run\u7684Overview\u6807\u7b7e\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8bad\u7ec3\u6700\u65b0\u7684\u6307\u6807\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Run - Overview - Metrics](mlflow-run-overview-metrics.png)\\n\\n\u6211\u4eec\u901a\u8fc7\u5355\u51fb\u76f8\u5173\u7684\u6307\u6807\u53ef\u4ee5\u67e5\u770b\u6307\u6807\u7684\u8be6\u60c5\u4fe1\u606f\u3002\\n\\n#### \u53ea\u6709\u4e00\u6b21\u8bb0\u5f55\u7684\u6307\u6807\\n\\n\u5bf9\u4e8e\u53ea\u8bb0\u5f55\u4e86\u4e00\u6b21\u7684\u6307\u6807\uff0c\u5176UI\u5c55\u793a\u6548\u679c\u5982\u4e0b\uff1a\\n\\n![MLflow Metrics Once](mlflow-metrics-once.png)\\n\\n\u53ef\u4ee5\u770b\u5230\uff0c\u6307\u6807\u7684\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u5176\u6700\u65b0\u503c\uff0c\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u90fd\u662f\u540c\u4e00\u4e2a\u6570\u3002\\n\\n#### \u542b\u6709\u6b65\u6570\u7684\u6307\u6807\\n\\n\u5bf9\u4e8e\u542b\u6709\u6b65\u6570\uff08Step\uff09\u7684\u6307\u6807\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u6574`X-axis`\u4e3a`Step`\uff0c\u53ef\u4ee5\u770b\u5230\u6839\u636e\u6b65\u6570\u7684\u6307\u6807\u8d70\u52bf\u3002\\n\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Metrics - With Steps](mlflow-metrics-with-steps.png)\\n\\n\u53e6\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6b65\u6570\u7684\u6700\u65b0\u503c\u3001\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u5747\u4e0d\u540c\uff0c\u5176\u5c55\u73b0\u4e86\u8be5\u6307\u6807\u7684\u7edf\u8ba1\u4fe1\u606f\u3002\\n\\n#### \u6a21\u578b\u6307\u6807\u770b\u677f\\n\\n\u6211\u4eec\u901a\u8fc7Run\u7684`Model metrics`\u6807\u7b7e\u9875\uff0c\u53ef\u4ee5\u770b\u5230\u6240\u6709\u6807\u7b7e\u7684\u72b6\u6001\u3002\\n\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![MLflow Metrics - Tab](mlflow-metrics-tab.png)\\n\\n\u6211\u4eec\u901a\u8fc7\u8fc7\u6ee4\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5feb\u901f\u7684\u8fc7\u6ee4\u5230\u6211\u4eec\u5173\u6ce8\u7684\u6307\u6807\u4fe1\u606f\u3002\\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u8fc7\u6ee4\u4ee5`metric_step`\u5f00\u59cb\u7684\u6307\u6807\uff1a\\n\\n![MLflow Metrics - Filter](mlflow-metrics-filter.png)\\n\\n### \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\\n\\n\u6211\u4eec\u4e0a\u8ff0\u7684\u5185\u5bb9\u7684Python\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```python\\nimport mlflow\\nimport random\\n\\nMLFLOW_TRACKING_URI = \\"http://localhost:8080\\"\\n\\nmlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\\nmlflow.set_experiment(\\"experiment_1\\")\\n\\nwith mlflow.start_run(run_name=\'Run Name #1\'):\\n    # Log with mlflow.log_param\\n    mlflow.log_param(\\"param1\\", 0.1283)\\n    mlflow.log_param(\\"param2\\", 0.238292)\\n\\n    # Log with mlflow.log_params\\n    mlflow.log_params({\\n        \\"param3\\": 0.392,\\n        \\"param4\\": 0.4829,    \\n    })\\n\\n    mlflow.log_metric(\\"metric_once\\", 100 * random.random())\\n    mlflow.log_metrics({\\n        \\"metric_1\\": 1.1019,\\n        \\"metric_2\\": 2.3829,\\n        \\"metric_3\\": 3.9842,\\n    })\\n\\n    for i in range(10):\\n        mlflow.log_metric(\\"metric_update\\", i * random.random())\\n\\n        mlflow.log_metric(\\"metric_step\\", 30 * i * (random.random() + 1), step=i)\\n\\n        mlflow.log_metrics({\\n            \\"metric_step_3\\": 100 * i * (random.random() + 1),\\n            \\"metric_step_4\\": 200 * i * (random.random() + 1),\\n        }, step=i)\\n```"},{"id":"ray-tune","metadata":{"permalink":"/eason-blog/blog/ray-tune","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-02-03-ray-tune/index.md","source":"@site/blog/2025-02-03-ray-tune/index.md","title":"Ray Tune","description":"\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u4f3cStable-Baseline3\u4e4b\u7c7b\u7684\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u6846\u67b6\u7684\u65f6\u5019\uff0c","date":"2025-02-03T00:00:00.000Z","tags":[{"inline":false,"label":"Reinforcement Learning","permalink":"/eason-blog/blog/tags/reinforcement-learning","description":"Reinforcement Learning related posts"}],"readingTime":7.32,"hasTruncateMarker":true,"authors":[{"name":"Eason G.","title":"Engineer","url":"https://github.com/e10101","page":{"permalink":"/eason-blog/blog/authors/eason"},"socials":{"github":"https://github.com/e10101"},"imageURL":"https://github.com/e10101.png","key":"eason"}],"frontMatter":{"slug":"ray-tune","title":"Ray Tune","authors":"eason","tags":["rl"]},"unlisted":false,"prevItem":{"title":"MLflow\u4f7f\u7528\u4ecb\u7ecd","permalink":"/eason-blog/blog/mlflow-intro"}},"content":"\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u4f3cStable-Baseline3\u4e4b\u7c7b\u7684\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u6846\u67b6\u7684\u65f6\u5019\uff0c\\n\u96be\u514d\u9700\u8981\u8fdb\u884c\u6bd4\u8f83\u591a\u6b21\u6570\u7684\u5b9e\u9a8c\u548c\u8d85\u53c2\u641c\u7d22\u3002\\n\\n\u90a3\u4e48\uff0c\u6211\u4eec\u501f\u52a9Ray Tune\u8fd9\u6837\u7684\u6846\u67b6\uff0c\u53ef\u4ee5\u5e2e\u6211\u4eec\u6765\u5b9e\u73b0\u5bf9\u53c2\u6570\u7684\u641c\u7d22\u3002\\n\\n\u672c\u6587\uff0c\u5373\u63cf\u8ff0\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528Ray Tune\u53ca\u5176\u6846\u67b6\u548c\u7ec4\u4ef6\uff0c\u6765\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5feb\u901f\u7684\u53c2\u6570\u641c\u7d22\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u5b89\u88c5\\n\\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8bf8\u5982Ray Dashboard\u8fd9\u6837\u7684\u5de5\u5177\u3002\\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u9644\u52a0\u4f9d\u8d56\u9879\uff08\u5982\u82e5\u4e0d\u7136\uff0c\u6211\u4eec\u5219\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u7c7b\u4f3c\u529f\u80fd\uff09\\n\\n```shell\\npip install ray[tune,default]\\n```\\n\\n## Ray Cluster\uff08Ray\u96c6\u7fa4\uff09\\n\\n\u5728\u6211\u4eec\u4f7f\u7528Ray\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528\u8bf8\u5982\u4e91\u5382\u5546\u7684\u96c6\u7fa4\u670d\u52a1\uff0c\u4f46\u662f\u4e3a\u4e86\u6f14\u793a\u76ee\u7684\u3002\\n\\n\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u7684\u672c\u5730\u73af\u5883\uff0c\u6784\u5efa\u4e00\u4e2a\u672c\u5730\u7684\u96c6\u7fa4\u73af\u5883\u3002\\n\\n```shell\\nRAY_GRAFANA_HOST=http://localhost:3090 \\\\\\nRAY_PROMETHEUS_HOST=http://localhost:9090 \\\\\\nRAY_PROMETHEUS_NAME=Prometheus \\\\\\nRAY_GRAFANA_IFRAME_HOST=http://localhost:3090 \\\\\\nray start --head --port=6379 --dashboard-host=0.0.0.0 --dashboard-port=8000\\n```\\n\\n\u4e0a\u9762\u7684\u547d\u4ee4\u662f\u6211\u4eec\u542f\u52a8\u4e86\u4e00\u4e2aHead\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u96c6\u7fa4\u7684\u4e3b\u8282\u70b9\uff09\u3002\\n\u7136\u540e\uff0c\u6211\u4eec\u542f\u52a8\u4e86Ray Dashboard\uff088000\u7aef\u53e3\uff09\uff0c\u540c\u65f6\u5bf9\u5916\u66b4\u9732\u4e86\u6211\u4eec\u7684Dashboard\u670d\u52a1\\n\uff08\u6b64\u4e3a\u6f14\u793a\u76ee\u7684\uff0c\u751f\u4ea7\u73af\u5883\u8bf7\u914c\u60c5\u8bbe\u7f6e\uff09\\n\\n\u53e6\u5916\uff0c`ray start`\u524d\u7684\u73af\u5883\u53d8\u91cf\u4e3a\u6211\u4eec\u7684Metrics\u5d4c\u5165\u76f8\u5173\u7684\u8bbe\u7f6e\uff0c\u9700\u8981\u5b8c\u6210\u672c\u6587\u4e0b\u8ff0\u7684\u76f8\u5173\u7684\u90e8\u5206\u540e\uff0c\u624d\u53ef\u6b63\u5e38\u663e\u793a\u3002\\n\\n\u96c6\u7fa4\u542f\u52a8\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a\\n\\n```\\nLocal node IP: 127.0.0.1\\n\\n--------------------\\nRay runtime started.\\n--------------------\\n\\nNext steps\\n  \\n  To connect to this Ray cluster:\\n    import ray\\n    ray.init()\\n  \\n  To submit a Ray job using the Ray Jobs CLI:\\n    RAY_ADDRESS=\'http://127.0.0.1:8000\' ray job submit --working-dir . -- python my_script.py\\n  \\n  See https://docs.ray.io/en/latest/cluster/running-applications/job-submission/index.html \\n  for more information on submitting Ray jobs to the Ray cluster.\\n  \\n  To terminate the Ray runtime, run\\n    ray stop\\n  \\n  To view the status of the cluster, use\\n    ray status\\n  \\n  To monitor and debug Ray, view the dashboard at \\n    127.0.0.1:8000\\n  \\n  If connection to the dashboard fails, check your firewall settings and network configuration.\\n```\\n\\n\u4e0a\u9762\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u5230Dashboard\u76f8\u5173\u7684\u914d\u7f6e\u8f93\u51fa\uff0c\u8fd9\u4e2a\u8bc1\u660e\u6211\u4eec\u7684Ray Dashboard\u7684\u8bbe\u7f6e\u662f\u6b63\u786e\u7684\u3002\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee\u4e0a\u8ff0\u5730\u5740\uff1a [http://localhost:8000](http://localhost:8000)\u3002\\n\\n### \u96c6\u7fa4\u72b6\u6001\u68c0\u67e5\\n\\n\u901a\u8fc7\u8fd0\u884c`ray status`\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u96c6\u7fa4\u7684\u72b6\u6001\u3002\\n\u6267\u884c\u547d\u4ee4\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\\n\\n```\\n======== Autoscaler status: 2025-02-03 04:21:48.303038 ========\\nNode status\\n---------------------------------------------------------------\\nActive:\\n 1 node_e3eda3eac5760c03fe761332c030a854809df3ae366ba8e3e852573f\\nPending:\\n (no pending nodes)\\nRecent failures:\\n (no failures)\\n\\nResources\\n---------------------------------------------------------------\\nUsage:\\n 0.0/12.0 CPU\\n 0B/11.89GiB memory\\n 0B/2.00GiB object_store_memory\\n\\nDemands:\\n (no resource demands)\\n```\\n\\n\u901a\u8fc7\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5f53\u524d\u6709\u4e00\u4e2a\u6fc0\u6d3b\u8282\u70b9\uff08`node_e3eda3eac5760c03fe761332c030a854809df3ae366ba8e3e852573f`\uff09\u3002\\n\\n\u56e0\u4e3a\u6ca1\u6709\u4efb\u52a1\u542f\u52a8\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u662f\u7a7a\u7684\u3002\\n\\n### \u96c6\u7fa4\u505c\u6b62\\n\\n\u901a\u8fc7`ray stop`\uff0c\u6211\u4eec\u53ef\u4ee5\u6765\u505c\u6b62\u96c6\u7fa4\u7684\u8fd0\u884c\u3002\\n\\n## Ray Dashboard\\n\\n\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c\u6211\u4eec\u662f\u65e0\u6cd5\u5728Dashboard\u4e2d\u67e5\u770b\u65f6\u5e8f\u5e8f\u5217\u7684\u6307\u6807\u7684\u3002\\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5b89\u88c5Grafana\u4ee5\u53caPrometheus\u6765\u67e5\u770b\u76f8\u5173\u7684\u65f6\u5e8f\u6570\u636e\u72b6\u6001\u3002\\n\\n:::tip \u4ec0\u4e48\u662fGrafana\u548cPrometheus\uff1f\\n\\n- **Grafana**\u662f\u4e00\u6b3e\u6bd4\u8f83\u6d41\u884c\u7684\u6307\u6807\u5c55\u793a\u7cfb\u7edf\uff08\u4e3b\u8981\u662f\u524d\u7aef\u5c55\u793a\uff09\uff0c\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u7684\u63a5\u5165\u591a\u79cd\u6570\u636e\u6765\u6e90\uff0c\u5e76\u63d0\u4f9b\u5c55\u793a\u3001\u544a\u8b66\u7b49\u6307\u6807\u76d1\u63a7\u670d\u52a1\u3002\\n- **Prometheus**\u5219\u63d0\u4f9b\u4e86\u6307\u6807\u7684\u91c7\u96c6\u4ee5\u53ca\u67e5\u8be2\u7b49\u670d\u52a1\uff0c\u53ef\u4ee5\u5feb\u901f\u7684\u4ece\u4e0d\u540c\u6765\u6e90\u7684\u7cfb\u7edf\u8fdb\u884c\u6307\u6807\u7684\u91c7\u96c6\uff0c\u4ee5\u53ca\u5bf9\u5916\u63d0\u4f9b\u6307\u6807\u7684\u67e5\u8be2\u670d\u52a1\u3002\\n\\n:::\\n\\n### \u5b89\u88c5Prometheus\\n\\n\u901a\u8fc7\u6267\u884c\u4e0b\u8ff0\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9Ray\u5e2e\u6211\u4eec\u5b89\u88c5Prometheus\u7ec4\u4ef6\uff1a\\n\\n```shell\\nray metrics launch-prometheus\\n```\\n\\n\u6b63\u5e38\u5b89\u88c5\u5e76\u8fd0\u884c\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7684\u8f93\u51fa\uff1a\\n\\n```\\nDownloaded: 105.84 MB / 105.84 MB\\nDownload completed.\\n2025-02-03 04:32:09,998 - INFO - Prometheus installed successfully.\\n2025-02-03 04:32:10,004 - INFO - Prometheus has started.\\nPrometheus is running with PID 91623.\\nTo stop Prometheus, use the command: `ray metrics shutdown-prometheus`, \'kill 91623\', or if you need to force stop, use \'kill -9 91623\'.\\nTo list all processes running Prometheus, use the command: \'ps aux | grep prometheus\'.\\n```\\n\\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b89\u88c5\u4e0a\u9762\u7684\u8f93\u51fa\uff0c\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4`ps aux | grep prometheus`\u6765\u67e5\u770bPrometheus\u76f8\u5173\u7684\u8fdb\u7a0b\uff0c\u5e76\u8fdb\u884c\u7ec8\u6b62\u7b49\u52a8\u4f5c\u3002\\n\\n\u5b89\u88c5\u5e76\u8fd0\u884c\u6210\u529f\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740\uff1a[http://localhost:9090](http://localhost:9090)\uff0c\\n\u5373\u53ef\u67e5\u770bPrometheus\u7684\u524d\u7aef\u3002\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u5e76\u67e5\u8be2`ray_node_cpu_utilization`\u7b49\u6307\u6807\uff0c\u6765\u6d4b\u8bd5\u4e00\u4e0bMetrics\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002\\n\\n\u6b63\u5e38\u5de5\u4f5c\u7684\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u8f93\u51fa\uff1a\\n\\n![Prometheus Metrics Testing](./ray-dashboard-prometheus-metrics-testing.png)\\n\\n### \u5b89\u88c5Grafana\\n\\n\u5b89\u88c5Grafana\u7684\u65b9\u6cd5\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7Grafana\u5b98\u65b9\u63d0\u4f9b\u7684\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u88c5\u6587\u4ef6\u8fdb\u884c\u5b89\u88c5\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528Docker\u6765\u5feb\u901f\u90e8\u7f72\u6211\u4eec\u7684Grafana\u670d\u52a1\u3002\\n\u6b64\u5904\uff0c\u6211\u4eec\u9009\u62e9\u4f7f\u7528Docker\u6765\u90e8\u7f72\u6211\u4eec\u7684Grafana\u670d\u52a1\u3002\\n\\n```shell\\ndocker run -d \\\\\\n  --name=grafana \\\\\\n  -p 3090:3000 \\\\\\n  -v grafana-storage:/var/lib/grafana \\\\\\n  -e \\"GF_AUTH_ANONYMOUS_ENABLED=true\\" \\\\\\n  -e \\"GF_SECURITY_ALLOW_EMBEDDING=true\\" \\\\\\n  grafana/grafana-oss\\n```\\n\\n\u901a\u8fc7\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b89\u88c5\u6211\u4eec\u7684Grafana\u670d\u52a1\uff0c\u5e76\u5728\u540e\u53f0`3090`\u7aef\u53e3\u8fd0\u884c\u6211\u4eec\u7684\u670d\u52a1\u3002\\n\\n\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\uff1a[http://localhost:3090](http://localhost:3090)\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884cGrafana\u7684\u5b89\u88c5\u914d\u7f6e\u7b49\u3002\\n\\n:::tip Grafana\u9ed8\u8ba4\u8d26\u6237\u5bc6\u7801\\n\\nGrafana\u7684\u9ed8\u8ba4\u8d26\u6237\u548c\u5bc6\u7801\u90fd\u662f\uff1a`admin`\u3002\u53ef\u4ee5\u5728\u767b\u9646\u6210\u529f\u540e\u7acb\u5373\u4fee\u6539\u5bc6\u7801\u4ee5\u4fdd\u62a4\u7cfb\u7edf\u5b89\u5168\u3002\\n\\n:::\\n\\n### \u7ed9Grafana\u6dfb\u52a0\u6570\u636e\u6e90\\n\\n\u767b\u9646\u6210\u529f\u540e\uff0c\u901a\u8fc7\uff1aConnections -> Data sources\u6807\u7b7e\uff0c\u6211\u4eec\u6dfb\u52a0Prometheus\u7684\u6e90\u5730\u5740\u3002\\n\u7531\u4e8e\u6211\u4eec\u662f\u901a\u8fc7Docker\u6765\u542f\u52a8\u7684Grafana\uff0c\u56e0\u6b64\u5982\u679c\u8981\u8ba9Container\u8bbf\u95ee\u6211\u4eecHost\u7684Prometheus\u670d\u52a1\uff0c\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c\u5982\u4e0b\u7684\u5730\u5740\uff1a\\n\\n```\\nhttp://host.docker.internal:9090\\n```\\n\\n\u5177\u4f53\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u6839\u636e\u771f\u5b9e\u7684\u60c5\u51b5\u8fdb\u884c\u66f4\u65b0\u3002\\n\\n\u6570\u636e\u6e90\u7684\u540d\u79f0\uff0c\u6211\u4eec\u5219\u4f7f\u7528\u4e0e`RAY_PROMETHEUS_NAME`\u4e00\u6837\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a\uff1a`Prometheus`\u3002\\n\\n### \u7ed9Grafana\u6dfb\u52a0Dashboard\\n\\n\u5728\u6dfb\u52a0\u6570\u636e\u6e90\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u590d\u5236\u5e76\u5bfc\u5165`/tmp/ray/session_latest/metrics/grafana/dashboards` \u76ee\u5f55\u4e0b\u76844\u4e2aJSON\u6587\u4ef6\uff0c\u6765\u5feb\u901f\u521b\u5efaRay Cluster\u76f8\u5173\u7684\u6570\u636e\u9762\u677f\u3002\\n\\n\u5bfc\u5165\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u52304\u4e2a\u9762\u677f\uff1a\\n\\n- Data Dashboard\\n- Default Dashboard\\n- Serve Dashboard\\n- Serve Deployment Dashboard\\n\\n\u5982Default Dashboard\u7684\u76d1\u63a7\u60c5\u51b5\uff1a\\n\\n![Grafana Dashboard](./grafna-dashboard.png)\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- [Collecting and monitoring metrics](https://docs.ray.io/en/latest/cluster/metrics.html) (Ray\u5b98\u65b9\u5173\u4e8e\u5b89\u88c5Prometheus\u4ee5\u53caGrafana\u7684\u6587\u6863)"}]}}')}}]);